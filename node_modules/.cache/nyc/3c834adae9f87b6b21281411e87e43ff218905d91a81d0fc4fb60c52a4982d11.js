'use strict';var cov_2eg4xyptg4=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/sonata/quote.js";var hash="64fc6c509da52989dd725bf047f6f1c89172313b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/sonata/quote.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:22,column:20},end:{line:22,column:24}},"3":{start:{line:24,column:18},end:{line:32,column:5}},"4":{start:{line:34,column:17},end:{line:34,column:59}},"5":{start:{line:36,column:18},end:{line:36,column:51}},"6":{start:{line:37,column:16},end:{line:37,column:38}},"7":{start:{line:39,column:4},end:{line:39,column:41}},"8":{start:{line:40,column:4},end:{line:40,column:42}},"9":{start:{line:41,column:4},end:{line:41,column:30}},"10":{start:{line:42,column:4},end:{line:42,column:38}},"11":{start:{line:44,column:4},end:{line:44,column:40}},"12":{start:{line:55,column:20},end:{line:55,column:24}},"13":{start:{line:56,column:19},end:{line:56,column:29}},"14":{start:{line:58,column:17},end:{line:58,column:56}},"15":{start:{line:59,column:4},end:{line:59,column:19}},"16":{start:{line:70,column:20},end:{line:70,column:24}},"17":{start:{line:75,column:17},end:{line:77,column:5}},"18":{start:{line:78,column:4},end:{line:78,column:19}},"19":{start:{line:82,column:0},end:{line:82,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:21,column:2},end:{line:21,column:3}},loc:{start:{line:21,column:17},end:{line:45,column:3}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:54,column:2},end:{line:54,column:3}},loc:{start:{line:54,column:16},end:{line:60,column:3}},line:54},"2":{name:"(anonymous_2)",decl:{start:{line:69,column:2},end:{line:69,column:3}},loc:{start:{line:69,column:18},end:{line:79,column:3}},line:69}},branchMap:{"0":{loc:{start:{line:30,column:33},end:{line:30,column:71}},type:"cond-expr",locations:[{start:{line:30,column:51},end:{line:30,column:66}},{start:{line:30,column:69},end:{line:30,column:71}}],line:30},"1":{loc:{start:{line:31,column:29},end:{line:31,column:68}},type:"cond-expr",locations:[{start:{line:31,column:48},end:{line:31,column:64}},{start:{line:31,column:67},end:{line:31,column:68}}],line:31}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"64fc6c509da52989dd725bf047f6f1c89172313b"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_2eg4xyptg4.s[0]++,require('egg').Controller);const _=(cov_2eg4xyptg4.s[1]++,require('lodash'));/**
 * @Controller quote
 */class QuoteController extends Controller{/**
   * @Summary List all quotes
   * @Router GET /mef/quoteManagement/v2/quote
   * @request query string externalId
   * @request query string productOfferingId
   * @request query string quoteItemId
   * @request query integer offset (N-1)*limit, 1 means 0 offset, 2 means 1*limit offset
   * @request query integer limit defualt:10
   * @Response 200 quoteResp OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_2eg4xyptg4.f[0]++;const{ctx}=(cov_2eg4xyptg4.s[2]++,this);const query=(cov_2eg4xyptg4.s[3]++,{externalId:ctx.query.externalId,// cpq uses offeringId
offeringId:ctx.query.productOfferingId,quoteItemId:ctx.query.quoteItemId,// cpq uses page and pagesize
pageSize:ctx.helper.toInt(ctx.query.limit?(cov_2eg4xyptg4.b[0][0]++,ctx.query.limit):(cov_2eg4xyptg4.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.offset?(cov_2eg4xyptg4.b[1][0]++,ctx.query.offset):(cov_2eg4xyptg4.b[1][1]++,1))});const data=(cov_2eg4xyptg4.s[4]++,await ctx.service.sonata.quote.list(query));const start=(cov_2eg4xyptg4.s[5]++,(query.page-1)*query.pageSize);const end=(cov_2eg4xyptg4.s[6]++,start+query.pageSize);cov_2eg4xyptg4.s[7]++;ctx.set('X-Total-Count',data.length);cov_2eg4xyptg4.s[8]++;ctx.set('X-Result-Count',data.length);cov_2eg4xyptg4.s[9]++;ctx.set('X-Offset',start);cov_2eg4xyptg4.s[10]++;ctx.set('X-Limit',query.pageSize);cov_2eg4xyptg4.s[11]++;ctx.body=_.slice(data,start,end);}/**
   * @Summary Get a quote by id
   * @Router GET /mef/quoteManagement/v2/quote/{id}
   * @Request path string *id
   * @Response 200 quoteResp OK
   * @Response 500 error Unknown internal server error
   */async show(){cov_2eg4xyptg4.f[1]++;const{ctx}=(cov_2eg4xyptg4.s[12]++,this);const{id}=(cov_2eg4xyptg4.s[13]++,ctx.params);const data=(cov_2eg4xyptg4.s[14]++,await ctx.service.sonata.quote.show(id));cov_2eg4xyptg4.s[15]++;ctx.body=data;}/**
   * @Summary Create a quote
   * @Router POST /mef/quoteManagement/v2/quote
   * @Request body createQuoteReq *body
   * @Response 201 quoteResp OK
   * @Response 500 error Unknown internal server error
   */async create(){cov_2eg4xyptg4.f[2]++;const{ctx}=(cov_2eg4xyptg4.s[16]++,this);// FIXME validation
// ctx.validate(ctx.rule.createQuoteReq, ctx.request.body);
const data=(cov_2eg4xyptg4.s[17]++,await ctx.service.sonata.quote.create(ctx.request.body));cov_2eg4xyptg4.s[18]++;ctx.body=data;}}cov_2eg4xyptg4.s[19]++;module.exports=QuoteController;