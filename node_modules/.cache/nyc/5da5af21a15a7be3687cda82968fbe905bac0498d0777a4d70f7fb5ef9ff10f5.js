'use strict';var cov_246q37nssz=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/heartbeat.js";var hash="b98ddf79b31d15cfae3b8a4e816158ccf9880a74";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/heartbeat.js",statementMap:{"0":{start:{line:3,column:23},end:{line:3,column:40}},"1":{start:{line:16,column:20},end:{line:16,column:24}},"2":{start:{line:18,column:4},end:{line:18,column:52}},"3":{start:{line:19,column:4},end:{line:19,column:20}},"4":{start:{line:30,column:20},end:{line:30,column:24}},"5":{start:{line:31,column:24},end:{line:31,column:34}},"6":{start:{line:33,column:4},end:{line:33,column:55}},"7":{start:{line:34,column:4},end:{line:34,column:20}},"8":{start:{line:38,column:0},end:{line:38,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:15,column:2},end:{line:15,column:3}},loc:{start:{line:15,column:16},end:{line:20,column:3}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:2},end:{line:29,column:3}},loc:{start:{line:29,column:24},end:{line:35,column:3}},line:29}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"b98ddf79b31d15cfae3b8a4e816158ccf9880a74"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const BaseController=(cov_246q37nssz.s[0]++,require('./base'));/**
 * @Controller HearBeat
 */class HeartbeatController extends BaseController{/**
   * @Summary Get heartbeat info
   * @Router GET /heartbeat
   * @Response 200 heartbeat OK
   * @Response 500 error Unknown internal server error
   */async show(){cov_246q37nssz.f[0]++;const{ctx}=(cov_246q37nssz.s[1]++,this);cov_246q37nssz.s[2]++;ctx.body=await ctx.service.heartbeat.getInfo();cov_246q37nssz.s[3]++;ctx.status=200;}/**
   * @Summary Get a service's heartbeat info
   * @Router GET /heartbeat/{service}
   * @Request path string *service
   * @Response 200 heartbeat OK
   * @Response 500 error Unknown internal server error
   */async getByService(){cov_246q37nssz.f[1]++;const{ctx}=(cov_246q37nssz.s[4]++,this);const{service}=(cov_246q37nssz.s[5]++,ctx.params);cov_246q37nssz.s[6]++;ctx.body=await ctx.service.heartbeat.get(service);cov_246q37nssz.s[7]++;ctx.status=200;}}cov_246q37nssz.s[8]++;module.exports=HeartbeatController;