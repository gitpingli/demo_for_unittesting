'use strict';var cov_2pm11avlgo=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/ums/member.js";var hash="05263636820945372f490f223ab0c9eb7e99b772";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/ums/member.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:18,column:20},end:{line:18,column:24}},"3":{start:{line:19,column:26},end:{line:19,column:36}},"4":{start:{line:20,column:18},end:{line:23,column:5}},"5":{start:{line:25,column:4},end:{line:25,column:38}},"6":{start:{line:26,column:17},end:{line:26,column:61}},"7":{start:{line:27,column:17},end:{line:31,column:5}},"8":{start:{line:32,column:18},end:{line:32,column:51}},"9":{start:{line:33,column:16},end:{line:33,column:38}},"10":{start:{line:34,column:4},end:{line:37,column:5}},"11":{start:{line:50,column:20},end:{line:50,column:24}},"12":{start:{line:51,column:30},end:{line:51,column:40}},"13":{start:{line:53,column:4},end:{line:55,column:5}},"14":{start:{line:68,column:20},end:{line:68,column:24}},"15":{start:{line:69,column:26},end:{line:69,column:36}},"16":{start:{line:71,column:4},end:{line:71,column:64}},"17":{start:{line:73,column:4},end:{line:75,column:5}},"18":{start:{line:89,column:20},end:{line:89,column:24}},"19":{start:{line:90,column:30},end:{line:90,column:40}},"20":{start:{line:92,column:4},end:{line:92,column:64}},"21":{start:{line:93,column:4},end:{line:99,column:5}},"22":{start:{line:112,column:20},end:{line:112,column:24}},"23":{start:{line:113,column:30},end:{line:113,column:40}},"24":{start:{line:115,column:4},end:{line:117,column:5}},"25":{start:{line:121,column:0},end:{line:121,column:33}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:2},end:{line:17,column:3}},loc:{start:{line:17,column:17},end:{line:38,column:3}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:49,column:2},end:{line:49,column:3}},loc:{start:{line:49,column:16},end:{line:56,column:3}},line:49},"2":{name:"(anonymous_2)",decl:{start:{line:67,column:2},end:{line:67,column:3}},loc:{start:{line:67,column:18},end:{line:76,column:3}},line:67},"3":{name:"(anonymous_3)",decl:{start:{line:88,column:2},end:{line:88,column:3}},loc:{start:{line:88,column:18},end:{line:100,column:3}},line:88},"4":{name:"(anonymous_4)",decl:{start:{line:111,column:2},end:{line:111,column:3}},loc:{start:{line:111,column:19},end:{line:118,column:3}},line:111}},branchMap:{"0":{loc:{start:{line:21,column:33},end:{line:21,column:77}},type:"cond-expr",locations:[{start:{line:21,column:54},end:{line:21,column:72}},{start:{line:21,column:75},end:{line:21,column:77}}],line:21},"1":{loc:{start:{line:22,column:29},end:{line:22,column:64}},type:"cond-expr",locations:[{start:{line:22,column:46},end:{line:22,column:60}},{start:{line:22,column:63},end:{line:22,column:64}}],line:22}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"05263636820945372f490f223ab0c9eb7e99b772"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_2pm11avlgo.s[0]++,require('egg').Controller);const _=(cov_2pm11avlgo.s[1]++,require('lodash'));/**
 * @Controller Member Management
 */class MemberController extends Controller{/**
   * @Summary List a company's members
   * @Router GET /companies/{companyId}/members
   * @Request path string *companyId
   * @Response 200 memberList OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_2pm11avlgo.f[0]++;const{ctx}=(cov_2pm11avlgo.s[2]++,this);const{companyId}=(cov_2pm11avlgo.s[3]++,ctx.params);const query=(cov_2pm11avlgo.s[4]++,{pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_2pm11avlgo.b[0][0]++,ctx.query.pageSize):(cov_2pm11avlgo.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_2pm11avlgo.b[1][0]++,ctx.query.page):(cov_2pm11avlgo.b[1][1]++,1))});cov_2pm11avlgo.s[5]++;ctx.logger.info('query:%j',query);const data=(cov_2pm11avlgo.s[6]++,await ctx.service.ums.member.list(companyId));const meta=(cov_2pm11avlgo.s[7]++,{total:data.length,page:query.page,per_page:query.pageSize});const start=(cov_2pm11avlgo.s[8]++,(query.page-1)*query.pageSize);const end=(cov_2pm11avlgo.s[9]++,start+query.pageSize);cov_2pm11avlgo.s[10]++;ctx.body={data:_.slice(data,start,end),meta};}/**
   * @Summary Get a member by Id
   * @Router GET /companies/{companyId}/members/{id}
   * @Request path string *companyId
   * @Request path string *id
   * @Response 200 member OK
   * @Response 404 member not umsnd
   * @Response 500 error Unknown internal server error
   */async show(){cov_2pm11avlgo.f[1]++;const{ctx}=(cov_2pm11avlgo.s[11]++,this);const{companyId,id}=(cov_2pm11avlgo.s[12]++,ctx.params);cov_2pm11avlgo.s[13]++;ctx.body={data:await ctx.service.ums.member.findOne(companyId,id)};}/**
   * @Summary Add a member into company
   * @Router POST /companies/{companyId}/members
   * @Request path string *companyId
   * @Request body createMemberPayload *body
   * @Response 200 member OK
   * @Response 404 member not found
   * @Response 500 error Unknown internal server error
   */async create(){cov_2pm11avlgo.f[2]++;const{ctx}=(cov_2pm11avlgo.s[14]++,this);const{companyId}=(cov_2pm11avlgo.s[15]++,ctx.params);cov_2pm11avlgo.s[16]++;ctx.validate(ctx.rule.createMemberPayload,ctx.request.body);cov_2pm11avlgo.s[17]++;ctx.body={data:await ctx.service.ums.member.create(companyId,ctx.request.body)};}/**
   * @Summary Update a member
   * @Router PATCH /companies/{companyId}/members/{id}
   * @Request path string *companyId
   * @Request path string *id
   * @Request body updateMemberPayload *body
   * @Response 200 member OK
   * @Response 404 member not found
   * @Response 500 error Unknown internal server error
   */async update(){cov_2pm11avlgo.f[3]++;const{ctx}=(cov_2pm11avlgo.s[18]++,this);const{companyId,id}=(cov_2pm11avlgo.s[19]++,ctx.params);cov_2pm11avlgo.s[20]++;ctx.validate(ctx.rule.updateMemberPayload,ctx.request.body);cov_2pm11avlgo.s[21]++;ctx.body={data:await ctx.service.ums.member.update(companyId,id,ctx.request.body)};}/**
   * @Summary Delete a member
   * @Router DELETE /companies/{companyId}/members/{id}
   * @Request path string *companyId
   * @Request path string *id
   * @Response 200 member OK
   * @Response 404 member not found
   * @Response 500 error Unknown internal server error
   */async destroy(){cov_2pm11avlgo.f[4]++;const{ctx}=(cov_2pm11avlgo.s[22]++,this);const{companyId,id}=(cov_2pm11avlgo.s[23]++,ctx.params);cov_2pm11avlgo.s[24]++;ctx.body={data:await ctx.service.ums.member.destroy(companyId,id)};}}cov_2pm11avlgo.s[25]++;module.exports=MemberController;