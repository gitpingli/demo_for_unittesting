'use strict';var cov_1yq952phea=function(){var path="/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/role.js";var hash="d8083748f2b39f86960bb194b2ba1a018670b803";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/role.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:16,column:20},end:{line:16,column:24}},"2":{start:{line:18,column:18},end:{line:21,column:5}},"3":{start:{line:22,column:17},end:{line:22,column:51}},"4":{start:{line:23,column:17},end:{line:27,column:5}},"5":{start:{line:28,column:4},end:{line:31,column:5}},"6":{start:{line:43,column:20},end:{line:43,column:24}},"7":{start:{line:44,column:19},end:{line:44,column:29}},"8":{start:{line:46,column:4},end:{line:48,column:5}},"9":{start:{line:59,column:20},end:{line:59,column:24}},"10":{start:{line:61,column:4},end:{line:61,column:62}},"11":{start:{line:63,column:4},end:{line:65,column:5}},"12":{start:{line:78,column:20},end:{line:78,column:24}},"13":{start:{line:79,column:19},end:{line:79,column:29}},"14":{start:{line:80,column:20},end:{line:80,column:36}},"15":{start:{line:82,column:4},end:{line:82,column:53}},"16":{start:{line:84,column:4},end:{line:86,column:5}},"17":{start:{line:90,column:0},end:{line:90,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:15,column:2},end:{line:15,column:3}},loc:{start:{line:15,column:17},end:{line:32,column:3}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:42,column:2},end:{line:42,column:3}},loc:{start:{line:42,column:16},end:{line:49,column:3}},line:42},"2":{name:"(anonymous_2)",decl:{start:{line:58,column:2},end:{line:58,column:3}},loc:{start:{line:58,column:18},end:{line:66,column:3}},line:58},"3":{name:"(anonymous_3)",decl:{start:{line:77,column:2},end:{line:77,column:3}},loc:{start:{line:77,column:18},end:{line:87,column:3}},line:77}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},f:{"0":0,"1":0,"2":0,"3":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"d8083748f2b39f86960bb194b2ba1a018670b803"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_1yq952phea.s[0]++,require('egg').Controller);/**
 * @Controller Role Management
 */class RoleController extends Controller{/**
   * @Summary List all roles
   * @Router GET /roles
   * @Response 200 roleList OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_1yq952phea.f[0]++;const{ctx}=(cov_1yq952phea.s[1]++,this);const query=(cov_1yq952phea.s[2]++,{});const data=(cov_1yq952phea.s[3]++,await ctx.service.role.list(query));const meta=(cov_1yq952phea.s[4]++,{total:data.length,page:0,per_page:100});cov_1yq952phea.s[5]++;ctx.body={data,meta};}/**
   * @Summary Get a role by id
   * @Router GET /roles/{id}
   * @Request path string *id
   * @Response 200 role OK
   * @Response 404 error role not found
   * @Response 500 error Unknown internal server error
   */async show(){cov_1yq952phea.f[1]++;const{ctx}=(cov_1yq952phea.s[6]++,this);const{id}=(cov_1yq952phea.s[7]++,ctx.params);cov_1yq952phea.s[8]++;ctx.body={data:await ctx.service.role.findById(id)};}/**
   * @Summary Create a role
   * @Router POST /roles
   * @Request body createRolePayload *body
   * @Response 200 role OK
   * @Response 500 error Unknown internal server error
   */async create(){cov_1yq952phea.f[2]++;const{ctx}=(cov_1yq952phea.s[9]++,this);cov_1yq952phea.s[10]++;ctx.validate(ctx.rule.createRolePayload,ctx.request.body);cov_1yq952phea.s[11]++;ctx.body={data:await ctx.service.role.create(ctx.request.body)};}/**
   * @Summary Update a role
   * @Router PATCH /roles/{id}
   * @Request path int *id
   * @Request body updateRolePayload *body
   * @Response 200 role OK
   * @Response 200 error Role not found
   * @Response 500 error Unknown internal server error
   */async update(){cov_1yq952phea.f[3]++;const{ctx}=(cov_1yq952phea.s[12]++,this);const{id}=(cov_1yq952phea.s[13]++,ctx.params);const payload=(cov_1yq952phea.s[14]++,ctx.request.body);cov_1yq952phea.s[15]++;ctx.validate(ctx.rule.updateRolePayload,payload);cov_1yq952phea.s[16]++;ctx.body={data:await ctx.service.role.update(id,payload)};}}cov_1yq952phea.s[17]++;module.exports=RoleController;