'use strict';var cov_2locisvytn=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/consoleconnect/port.js";var hash="7ead52ac68cba89170965181d5bf1d057583cca2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/consoleconnect/port.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:19,column:20},end:{line:19,column:24}},"3":{start:{line:20,column:18},end:{line:23,column:5}},"4":{start:{line:25,column:26},end:{line:25,column:36}},"5":{start:{line:26,column:17},end:{line:29,column:5}},"6":{start:{line:30,column:17},end:{line:34,column:5}},"7":{start:{line:35,column:18},end:{line:35,column:51}},"8":{start:{line:36,column:16},end:{line:36,column:38}},"9":{start:{line:37,column:4},end:{line:40,column:6}},"10":{start:{line:53,column:20},end:{line:53,column:24}},"11":{start:{line:54,column:30},end:{line:54,column:40}},"12":{start:{line:56,column:4},end:{line:58,column:6}},"13":{start:{line:74,column:20},end:{line:74,column:24}},"14":{start:{line:75,column:30},end:{line:75,column:40}},"15":{start:{line:76,column:47},end:{line:76,column:56}},"16":{start:{line:77,column:4},end:{line:85,column:6}},"17":{start:{line:89,column:0},end:{line:89,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:2},end:{line:18,column:3}},loc:{start:{line:18,column:16},end:{line:41,column:3}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:52,column:2},end:{line:52,column:3}},loc:{start:{line:52,column:15},end:{line:59,column:3}},line:52},"2":{name:"(anonymous_2)",decl:{start:{line:73,column:2},end:{line:73,column:3}},loc:{start:{line:73,column:22},end:{line:86,column:3}},line:73}},branchMap:{"0":{loc:{start:{line:21,column:33},end:{line:21,column:77}},type:"cond-expr",locations:[{start:{line:21,column:54},end:{line:21,column:72}},{start:{line:21,column:75},end:{line:21,column:77}}],line:21},"1":{loc:{start:{line:22,column:29},end:{line:22,column:64}},type:"cond-expr",locations:[{start:{line:22,column:46},end:{line:22,column:60}},{start:{line:22,column:63},end:{line:22,column:64}}],line:22}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"7ead52ac68cba89170965181d5bf1d057583cca2"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_2locisvytn.s[0]++,require('egg').Controller);const _=(cov_2locisvytn.s[1]++,require('lodash'));/**
 * @Controller CC_Port Management
 */class PortController extends Controller{/**
   * @Summary List a company's all existing ports
   * @Router GET /companies/{companyId}/consoleconnect/ports
   * @Request path string *companyId consolecore company id
   * @Request query string pageSize
   * @Request query string page
   * @Response 200 portList OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_2locisvytn.f[0]++;const{ctx}=(cov_2locisvytn.s[2]++,this);const query=(cov_2locisvytn.s[3]++,{pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_2locisvytn.b[0][0]++,ctx.query.pageSize):(cov_2locisvytn.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_2locisvytn.b[1][0]++,ctx.query.page):(cov_2locisvytn.b[1][1]++,1))});const{companyId}=(cov_2locisvytn.s[4]++,ctx.params);const data=(cov_2locisvytn.s[5]++,await ctx.service.consoleconnect.port.search(companyId,ctx.query));const meta=(cov_2locisvytn.s[6]++,{total:data.length,page:query.page,per_page:query.pageSize});const start=(cov_2locisvytn.s[7]++,(query.page-1)*query.pageSize);const end=(cov_2locisvytn.s[8]++,start+query.pageSize);cov_2locisvytn.s[9]++;ctx.body={data:_.slice(data,start,end),meta};}/**
   * @Summary Get a port by Id
   * @Router GET /companies/{companyId}/consoleconnect/ports/{id}
   * @Request path string *companyId consolecore company id
   * @Request path string *id consoleconnect port id
   * @Response 200 port OK
   * @Response 404 port not found
   * @Response 500 error Unknown internal server error
   */async show(){cov_2locisvytn.f[1]++;const{ctx}=(cov_2locisvytn.s[10]++,this);const{companyId,id}=(cov_2locisvytn.s[11]++,ctx.params);cov_2locisvytn.s[12]++;ctx.body={data:await ctx.service.consoleconnect.port.findOne(companyId,id)};}/**
   * @Summary Get a port's utilization
   * @Router GET /companies/{companyId}/consoleconnect/ports/{id}/utilization
   * @Request path string *companyId consolecore company id
   * @Request path string *id consoleconnect port id
   * @Request query string startTime Unix timestamp for beginning of time window
   * @Request query string Unix timestamp for end of time window
   * @Request query Set the resolution of response (day | hour | minute). Defaults to minute if not passed. Note: as minute is the smallest resolution, it will not have min/max fields in the response
   * @Response 200 utilization OK
   * @Response 404 port not found
   * @Response 500 error Unknown internal server error
   */async utilization(){cov_2locisvytn.f[2]++;const{ctx}=(cov_2locisvytn.s[13]++,this);const{companyId,id}=(cov_2locisvytn.s[14]++,ctx.params);const{startTime,endTime,resolution}=(cov_2locisvytn.s[15]++,ctx.query);cov_2locisvytn.s[16]++;ctx.body={data:await ctx.service.consoleconnect.port.getUtilization(companyId,id,startTime,endTime,resolution)};}}cov_2locisvytn.s[17]++;module.exports=PortController;