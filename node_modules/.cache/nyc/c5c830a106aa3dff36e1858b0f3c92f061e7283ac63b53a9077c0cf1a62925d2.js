'use strict';var cov_voj3jml0d=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/cpq/quote.js";var hash="cf45bc2a8a8bc8b70847dbe19a045fd8091191ba";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/cpq/quote.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:19,column:20},end:{line:19,column:24}},"3":{start:{line:20,column:4},end:{line:20,column:64}},"4":{start:{line:22,column:4},end:{line:24,column:6}},"5":{start:{line:39,column:20},end:{line:39,column:24}},"6":{start:{line:40,column:18},end:{line:43,column:5}},"7":{start:{line:44,column:17},end:{line:44,column:62}},"8":{start:{line:45,column:17},end:{line:49,column:5}},"9":{start:{line:50,column:18},end:{line:50,column:51}},"10":{start:{line:51,column:16},end:{line:51,column:38}},"11":{start:{line:52,column:4},end:{line:55,column:6}},"12":{start:{line:67,column:20},end:{line:67,column:24}},"13":{start:{line:68,column:19},end:{line:68,column:29}},"14":{start:{line:70,column:4},end:{line:72,column:6}},"15":{start:{line:76,column:0},end:{line:76,column:33}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:2},end:{line:18,column:3}},loc:{start:{line:18,column:17},end:{line:25,column:3}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:38,column:2},end:{line:38,column:3}},loc:{start:{line:38,column:16},end:{line:56,column:3}},line:38},"2":{name:"(anonymous_2)",decl:{start:{line:66,column:2},end:{line:66,column:3}},loc:{start:{line:66,column:15},end:{line:73,column:3}},line:66}},branchMap:{"0":{loc:{start:{line:41,column:33},end:{line:41,column:77}},type:"cond-expr",locations:[{start:{line:41,column:54},end:{line:41,column:72}},{start:{line:41,column:75},end:{line:41,column:77}}],line:41},"1":{loc:{start:{line:42,column:29},end:{line:42,column:64}},type:"cond-expr",locations:[{start:{line:42,column:46},end:{line:42,column:60}},{start:{line:42,column:63},end:{line:42,column:64}}],line:42}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"cf45bc2a8a8bc8b70847dbe19a045fd8091191ba"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_voj3jml0d.s[0]++,require('egg').Controller);const _=(cov_voj3jml0d.s[1]++,require('lodash'));/**
 * @Controller Quote Management
 */class QuoteController extends Controller{/**
   * @Summary Create a quote
   * @Router POST /quotes
   * @Request body createQuotePayload *body
   * @Response 200 quote OK
   * @Response 404 quote not found
   * @Response 500 error Unknown internal server error
   */async create(){cov_voj3jml0d.f[0]++;const{ctx}=(cov_voj3jml0d.s[2]++,this);cov_voj3jml0d.s[3]++;ctx.validate(ctx.rule.createQuotePayload,ctx.request.body);cov_voj3jml0d.s[4]++;ctx.body={data:await ctx.service.cpq.quote.create(ctx.request.body)};}/**
   * @Summary List all existing quotes
   * @Router GET /quotes
   * @Request query string companyId
   * @Request query string offeringId
   * @Request query string quoteItemId
   * @Request query string pageSize
   * @Request query string page
   * @Response 200 quoteList OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_voj3jml0d.f[1]++;const{ctx}=(cov_voj3jml0d.s[5]++,this);const query=(cov_voj3jml0d.s[6]++,{pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_voj3jml0d.b[0][0]++,ctx.query.pageSize):(cov_voj3jml0d.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_voj3jml0d.b[1][0]++,ctx.query.page):(cov_voj3jml0d.b[1][1]++,1))});const data=(cov_voj3jml0d.s[7]++,await ctx.service.cpq.quote.search(ctx.query));const meta=(cov_voj3jml0d.s[8]++,{total:data.length,page:query.page,per_page:query.pageSize});const start=(cov_voj3jml0d.s[9]++,(query.page-1)*query.pageSize);const end=(cov_voj3jml0d.s[10]++,start+query.pageSize);cov_voj3jml0d.s[11]++;ctx.body={data:_.slice(data,start,end),meta};}/**
   * @Summary Get a quote by Id
   * @Router GET /quotes/{id}
   * @Request path string *id
   * @Response 200 quote OK
   * @Response 404 quote not found
   * @Response 500 error Unknown internal server error
   */async show(){cov_voj3jml0d.f[2]++;const{ctx}=(cov_voj3jml0d.s[12]++,this);const{id}=(cov_voj3jml0d.s[13]++,ctx.params);cov_voj3jml0d.s[14]++;ctx.body={data:await ctx.service.cpq.quote.findOne(id)};}}cov_voj3jml0d.s[15]++;module.exports=QuoteController;