'use strict';var cov_yj59ynwm=function(){var path="/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/ums/user.js";var hash="2991a94aaddc237fa368a7a050a93a7e7ff9e4a3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/ums/user.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:22,column:20},end:{line:22,column:24}},"3":{start:{line:23,column:18},end:{line:26,column:5}},"4":{start:{line:27,column:38},end:{line:27,column:47}},"5":{start:{line:28,column:22},end:{line:28,column:33}},"6":{start:{line:29,column:17},end:{line:29,column:86}},"7":{start:{line:30,column:17},end:{line:34,column:5}},"8":{start:{line:35,column:18},end:{line:35,column:51}},"9":{start:{line:36,column:16},end:{line:36,column:38}},"10":{start:{line:37,column:4},end:{line:40,column:5}},"11":{start:{line:52,column:20},end:{line:52,column:24}},"12":{start:{line:53,column:19},end:{line:53,column:29}},"13":{start:{line:55,column:4},end:{line:57,column:5}},"14":{start:{line:70,column:20},end:{line:70,column:24}},"15":{start:{line:71,column:19},end:{line:71,column:29}},"16":{start:{line:73,column:4},end:{line:73,column:62}},"17":{start:{line:75,column:4},end:{line:77,column:5}},"18":{start:{line:89,column:20},end:{line:89,column:24}},"19":{start:{line:90,column:19},end:{line:90,column:29}},"20":{start:{line:92,column:4},end:{line:94,column:5}},"21":{start:{line:98,column:0},end:{line:98,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:21,column:2},end:{line:21,column:3}},loc:{start:{line:21,column:17},end:{line:41,column:3}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:51,column:2},end:{line:51,column:3}},loc:{start:{line:51,column:16},end:{line:58,column:3}},line:51},"2":{name:"(anonymous_2)",decl:{start:{line:69,column:2},end:{line:69,column:3}},loc:{start:{line:69,column:18},end:{line:78,column:3}},line:69},"3":{name:"(anonymous_3)",decl:{start:{line:88,column:2},end:{line:88,column:3}},loc:{start:{line:88,column:19},end:{line:95,column:3}},line:88}},branchMap:{"0":{loc:{start:{line:24,column:33},end:{line:24,column:77}},type:"cond-expr",locations:[{start:{line:24,column:54},end:{line:24,column:72}},{start:{line:24,column:75},end:{line:24,column:77}}],line:24},"1":{loc:{start:{line:25,column:29},end:{line:25,column:64}},type:"cond-expr",locations:[{start:{line:25,column:46},end:{line:25,column:60}},{start:{line:25,column:63},end:{line:25,column:64}}],line:25}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"2991a94aaddc237fa368a7a050a93a7e7ff9e4a3"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_yj59ynwm.s[0]++,require('egg').Controller);const _=(cov_yj59ynwm.s[1]++,require('lodash'));/**
 * @Controller User Management
 */class UserController extends Controller{/**
   * @Summary List all users
   * @Router GET /users
   * @Request query string email search by email
   * @Request query boolean deleted
   * @Request query string roles role list, separated by comma, such as ADMIN,CUSTOMER
   * @Request query string state filter out user.state in one of the state
   * @Request query string pageSize
   * @Request query string page
   * @Response 200 userList OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_yj59ynwm.f[0]++;const{ctx}=(cov_yj59ynwm.s[2]++,this);const query=(cov_yj59ynwm.s[3]++,{pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_yj59ynwm.b[0][0]++,ctx.query.pageSize):(cov_yj59ynwm.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_yj59ynwm.b[1][0]++,ctx.query.page):(cov_yj59ynwm.b[1][1]++,1))});const{email,deleted,roles}=(cov_yj59ynwm.s[4]++,ctx.query);const{state}=(cov_yj59ynwm.s[5]++,ctx.queries);const data=(cov_yj59ynwm.s[6]++,await ctx.service.ums.user.getUsers({email,deleted,roles,state}));const meta=(cov_yj59ynwm.s[7]++,{total:data.length,page:query.page,per_page:query.pageSize});const start=(cov_yj59ynwm.s[8]++,(query.page-1)*query.pageSize);const end=(cov_yj59ynwm.s[9]++,start+query.pageSize);cov_yj59ynwm.s[10]++;ctx.body={data:_.slice(data,start,end),meta};}/**
   * @Summary Get a user by Id
   * @Router GET /users/{id}
   * @Request path string *id
   * @Response 200 user OK
   * @Response 404 user not found
   * @Response 500 error Unknown internal server error
   */async show(){cov_yj59ynwm.f[1]++;const{ctx}=(cov_yj59ynwm.s[11]++,this);const{id}=(cov_yj59ynwm.s[12]++,ctx.params);cov_yj59ynwm.s[13]++;ctx.body={data:await ctx.service.ums.user.findOne(id)};}/**
   * @Summary Update a user
   * @Router PATCH /users/{id}
   * @Request path string *id
   * @Request body updateUserPayload *body
   * @Response 200 user OK
   * @Response 404 user not found
   * @Response 500 error Unknown internal server error
   */async update(){cov_yj59ynwm.f[2]++;const{ctx}=(cov_yj59ynwm.s[14]++,this);const{id}=(cov_yj59ynwm.s[15]++,ctx.params);cov_yj59ynwm.s[16]++;ctx.validate(ctx.rule.updateUserPayload,ctx.request.body);cov_yj59ynwm.s[17]++;ctx.body={data:await ctx.service.ums.user.update(id,ctx.request.body)};}/**
   * @Summary Delete a user
   * @Router DELETE /users/{id}
   * @Request path string *id
   * @Response 200 user OK
   * @Response 404 user not found
   * @Response 500 error Unknown internal server error
   */async destroy(){cov_yj59ynwm.f[3]++;const{ctx}=(cov_yj59ynwm.s[18]++,this);const{id}=(cov_yj59ynwm.s[19]++,ctx.params);cov_yj59ynwm.s[20]++;ctx.body={data:await ctx.service.ums.user.destroy(id)};}}cov_yj59ynwm.s[21]++;module.exports=UserController;