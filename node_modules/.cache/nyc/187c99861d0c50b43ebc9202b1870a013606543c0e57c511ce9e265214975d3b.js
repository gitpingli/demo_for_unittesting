'use strict';var cov_2krbq7ixpz=function(){var path="/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/workflow/definition.js";var hash="090d7d043e93b763d011a2e1dad5cdcbce8d6e12";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/workflow/definition.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:10,column:20},end:{line:10,column:24}},"3":{start:{line:11,column:16},end:{line:16,column:5}},"4":{start:{line:17,column:4},end:{line:17,column:46}},"5":{start:{line:29,column:20},end:{line:29,column:24}},"6":{start:{line:30,column:18},end:{line:33,column:5}},"7":{start:{line:34,column:21},end:{line:34,column:106}},"8":{start:{line:35,column:22},end:{line:35,column:40}},"9":{start:{line:36,column:19},end:{line:52,column:7}},"10":{start:{line:37,column:28},end:{line:37,column:89}},"11":{start:{line:38,column:26},end:{line:38,column:85}},"12":{start:{line:39,column:22},end:{line:39,column:77}},"13":{start:{line:40,column:32},end:{line:40,column:121}},"14":{start:{line:41,column:32},end:{line:41,column:117}},"15":{start:{line:42,column:6},end:{line:51,column:7}},"16":{start:{line:53,column:17},end:{line:57,column:5}},"17":{start:{line:58,column:4},end:{line:61,column:5}},"18":{start:{line:75,column:20},end:{line:75,column:24}},"19":{start:{line:76,column:19},end:{line:76,column:29}},"20":{start:{line:78,column:37},end:{line:78,column:50}},"21":{start:{line:80,column:27},end:{line:80,column:117}},"22":{start:{line:81,column:36},end:{line:81,column:125}},"23":{start:{line:82,column:19},end:{line:94,column:6}},"24":{start:{line:90,column:8},end:{line:92,column:9}},"25":{start:{line:95,column:4},end:{line:97,column:5}},"26":{start:{line:107,column:20},end:{line:107,column:24}},"27":{start:{line:108,column:15},end:{line:108,column:28}},"28":{start:{line:110,column:17},end:{line:110,column:37}},"29":{start:{line:111,column:4},end:{line:111,column:31}},"30":{start:{line:112,column:21},end:{line:112,column:59}},"31":{start:{line:114,column:4},end:{line:122,column:5}},"32":{start:{line:115,column:6},end:{line:117,column:7}},"33":{start:{line:121,column:6},end:{line:121,column:37}},"34":{start:{line:126,column:0},end:{line:126,column:45}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:2},end:{line:9,column:3}},loc:{start:{line:9,column:41},end:{line:18,column:3}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:17},end:{line:62,column:3}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:54},end:{line:36,column:55}},loc:{start:{line:36,column:72},end:{line:52,column:5}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:74,column:2},end:{line:74,column:3}},loc:{start:{line:74,column:16},end:{line:98,column:3}},line:74},"4":{name:"(anonymous_4)",decl:{start:{line:89,column:66},end:{line:89,column:67}},loc:{start:{line:89,column:86},end:{line:93,column:7}},line:89},"5":{name:"(anonymous_5)",decl:{start:{line:106,column:2},end:{line:106,column:3}},loc:{start:{line:106,column:18},end:{line:123,column:3}},line:106}},branchMap:{"0":{loc:{start:{line:31,column:33},end:{line:31,column:77}},type:"cond-expr",locations:[{start:{line:31,column:54},end:{line:31,column:72}},{start:{line:31,column:75},end:{line:31,column:77}}],line:31},"1":{loc:{start:{line:32,column:29},end:{line:32,column:64}},type:"cond-expr",locations:[{start:{line:32,column:46},end:{line:32,column:60}},{start:{line:32,column:63},end:{line:32,column:64}}],line:32}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"090d7d043e93b763d011a2e1dad5cdcbce8d6e12"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_2krbq7ixpz.s[0]++,require('egg').Controller);const _=(cov_2krbq7ixpz.s[1]++,require('lodash'));/**
 * @Controller Workflow_Definition Management
 */class WorkflowDeploymentController extends Controller{async curl(method,endpoint,payload){cov_2krbq7ixpz.f[0]++;const{ctx}=(cov_2krbq7ixpz.s[2]++,this);const req=(cov_2krbq7ixpz.s[3]++,{name:'workflow',method,endpoint,payload});cov_2krbq7ixpz.s[4]++;return await ctx.service.backend.curl(req);}/**
   * @Summary List all deployed bpmns
   * @Router GET /workflows/definitions
   * @Request query string pageSize
   * @Request query string page
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async index(){cov_2krbq7ixpz.f[1]++;const{ctx}=(cov_2krbq7ixpz.s[5]++,this);const query=(cov_2krbq7ixpz.s[6]++,{pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_2krbq7ixpz.b[0][0]++,ctx.query.pageSize):(cov_2krbq7ixpz.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_2krbq7ixpz.b[1][0]++,ctx.query.page):(cov_2krbq7ixpz.b[1][1]++,1))});const response=(cov_2krbq7ixpz.s[7]++,await this.curl('GET',`/workflows/v1?page=${query.page}&pageSize=${query.pageSize}`));const workflows=(cov_2krbq7ixpz.s[8]++,response.workflows);const result=(cov_2krbq7ixpz.s[9]++,await Promise.all(_.map(workflows,async workflow=>{cov_2krbq7ixpz.f[2]++;const bpmnProcessId=(cov_2krbq7ixpz.s[10]++,workflow.sourceAsMap.value.deployedWorkflows[0].bpmnProcessId);const workflowKey=(cov_2krbq7ixpz.s[11]++,workflow.sourceAsMap.value.deployedWorkflows[0].workflowKey);const version=(cov_2krbq7ixpz.s[12]++,workflow.sourceAsMap.value.deployedWorkflows[0].version);const workflowInstances=(cov_2krbq7ixpz.s[13]++,await this.curl('GET',`/workflowInstances/v1/bpmnProcesses/${bpmnProcessId}/${version}`));const workflowIncidents=(cov_2krbq7ixpz.s[14]++,await this.curl('GET',`/incidents/v1/bpmnProcesses/${bpmnProcessId}/${workflowKey}`));cov_2krbq7ixpz.s[15]++;return{workflow:{workflowKey:workflow.sourceAsMap.value.deployedWorkflows[0].workflowKey,bpmnProcessId:workflow.sourceAsMap.value.deployedWorkflows[0].bpmnProcessId,version:workflow.sourceAsMap.value.deployedWorkflows[0].version,resource:workflow.sourceAsMap.value.resources[0].resource},instances:workflowInstances.workflowInstances,incidents:workflowIncidents.workflowIncidents};})));const meta=(cov_2krbq7ixpz.s[16]++,{total:response.total,page:query.page,per_page:query.pageSize});cov_2krbq7ixpz.s[17]++;ctx.body={meta,data:result};}/**
   * @Summary Get a bpmn by key
   * @Router GET /workflows/definitions/{id}
   * @Request path string *id
   * @Request query string pageSize
   * @Request query string page
   * @Response 200
   * @Response 404
   * @Response 500 error Unknown internal server error
   */async show(){cov_2krbq7ixpz.f[3]++;const{ctx}=(cov_2krbq7ixpz.s[18]++,this);const{id}=(cov_2krbq7ixpz.s[19]++,ctx.params);const[bpmnProcessId,version]=(cov_2krbq7ixpz.s[20]++,id.split('-'));const originWorkflow=(cov_2krbq7ixpz.s[21]++,await this.curl('GET',`/workflows/v1/bpmnProcesses/${bpmnProcessId}/versions/${version}`));const originWorkflowInstances=(cov_2krbq7ixpz.s[22]++,await this.curl('GET',`/workflowInstances/v1/bpmnProcesses/${bpmnProcessId}/${version}`));const result=(cov_2krbq7ixpz.s[23]++,[{workflow:{workflowKey:originWorkflow.workflows[0].value.deployedWorkflows[0].workflowKey,bpmnProcessId:originWorkflow.workflows[0].value.deployedWorkflows[0].bpmnProcessId,version:originWorkflow.workflows[0].value.deployedWorkflows[0].version,resource:originWorkflow.workflows[0].value.resources[0].resource},instances:_.map(originWorkflowInstances.workflowInstances,workflowInstance=>{cov_2krbq7ixpz.f[4]++;cov_2krbq7ixpz.s[24]++;return{workflowInstanceKey:workflowInstance.value.workflowInstanceKey};})}]);cov_2krbq7ixpz.s[25]++;ctx.body={data:result};}/**
   * @Summary Deployment a bpmn
   * @Router POST /workflows/definitions
   * @Request body string *body
   * @Response 200
   */async create(){cov_2krbq7ixpz.f[5]++;const{ctx}=(cov_2krbq7ixpz.s[26]++,this);const fs=(cov_2krbq7ixpz.s[27]++,require('fs'));// ctx.validate(ctx.rule.createUserPayload, ctx.request.body);
const file=(cov_2krbq7ixpz.s[28]++,ctx.request.files[0]);cov_2krbq7ixpz.s[29]++;ctx.logger.info('%j',file);const contents=(cov_2krbq7ixpz.s[30]++,fs.readFileSync(file.filepath,'utf8'));cov_2krbq7ixpz.s[31]++;try{cov_2krbq7ixpz.s[32]++;ctx.body={data:await this.curl('POST','/workflows/v1/resources/xml',contents)};}finally{cov_2krbq7ixpz.s[33]++;// remove tmp files and don't block the request's response
// cleanupRequestFiles won't throw error even remove file io error happen
ctx.cleanupRequestFiles([file]);}}}cov_2krbq7ixpz.s[34]++;module.exports=WorkflowDeploymentController;