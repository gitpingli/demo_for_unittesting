'use strict';var cov_wpj1yl3lf=function(){var path="/home/htchen/console-core-service-sherpa/app/service/sonata/sonataBackEnd.js";var hash="a866a9a8f80602ecaf7eb190cd22033678418135";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/service/sonata/sonataBackEnd.js",statementMap:{"0":{start:{line:3,column:20},end:{line:3,column:34}},"1":{start:{line:7,column:20},end:{line:7,column:24}},"2":{start:{line:8,column:23},end:{line:8,column:27}},"3":{start:{line:9,column:4},end:{line:11,column:5}},"4":{start:{line:10,column:6},end:{line:10,column:71}},"5":{start:{line:13,column:16},end:{line:13,column:59}},"6":{start:{line:15,column:4},end:{line:15,column:58}},"7":{start:{line:16,column:19},end:{line:21,column:6}},"8":{start:{line:23,column:4},end:{line:25,column:5}},"9":{start:{line:24,column:6},end:{line:24,column:24}},"10":{start:{line:27,column:4},end:{line:27,column:36}},"11":{start:{line:31,column:0},end:{line:31,column:41}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:2},end:{line:6,column:3}},loc:{start:{line:6,column:62},end:{line:28,column:3}},line:6}},branchMap:{"0":{loc:{start:{line:6,column:35},end:{line:6,column:49}},type:"default-arg",locations:[{start:{line:6,column:44},end:{line:6,column:49}}],line:6},"1":{loc:{start:{line:9,column:4},end:{line:11,column:5}},type:"if",locations:[{start:{line:9,column:4},end:{line:11,column:5}},{start:{line:9,column:4},end:{line:11,column:5}}],line:9},"2":{loc:{start:{line:23,column:4},end:{line:25,column:5}},type:"if",locations:[{start:{line:23,column:4},end:{line:25,column:5}},{start:{line:23,column:4},end:{line:25,column:5}}],line:23}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0},b:{"0":[0],"1":[0,0],"2":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"a866a9a8f80602ecaf7eb190cd22033678418135"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{Service}=(cov_wpj1yl3lf.s[0]++,require('egg'));class SonataBackEndBaseService extends Service{async curl({service,endpoint,method=(cov_wpj1yl3lf.b[0][0]++,'GET'),payload}){cov_wpj1yl3lf.f[0]++;const{ctx}=(cov_wpj1yl3lf.s[1]++,this);const{config}=(cov_wpj1yl3lf.s[2]++,this);cov_wpj1yl3lf.s[3]++;if(!config.service[service]){cov_wpj1yl3lf.b[1][0]++;cov_wpj1yl3lf.s[4]++;return ctx.throw(404,'Given service '+service+' is invalid');}else{cov_wpj1yl3lf.b[1][1]++;}const url=(cov_wpj1yl3lf.s[5]++,`${config.service[service].url}${endpoint}`);cov_wpj1yl3lf.s[6]++;ctx.logger.info('%s %s %s',service,method,endpoint);const result=(cov_wpj1yl3lf.s[7]++,await this.ctx.curl(url,{method,contentType:'json',data:payload,dataType:'json'}));cov_wpj1yl3lf.s[8]++;if(result.status===200){cov_wpj1yl3lf.b[2][0]++;cov_wpj1yl3lf.s[9]++;return result.data;}else{cov_wpj1yl3lf.b[2][1]++;}cov_wpj1yl3lf.s[10]++;ctx.throw(result.status,result);}}cov_wpj1yl3lf.s[11]++;module.exports=SonataBackEndBaseService;