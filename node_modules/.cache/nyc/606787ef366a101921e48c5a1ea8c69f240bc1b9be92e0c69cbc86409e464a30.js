'use strict';var cov_2pxn9dzqnr=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/gateway/dashboard.js";var hash="feba4ade3ba888bb38407e421d0c1bd7699fe785";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/gateway/dashboard.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:21,column:20},end:{line:21,column:24}},"2":{start:{line:22,column:16},end:{line:22,column:78}},"3":{start:{line:23,column:4},end:{line:23,column:18}},"4":{start:{line:37,column:20},end:{line:37,column:24}},"5":{start:{line:38,column:19},end:{line:38,column:29}},"6":{start:{line:40,column:16},end:{line:43,column:5}},"7":{start:{line:44,column:4},end:{line:44,column:18}},"8":{start:{line:57,column:20},end:{line:57,column:24}},"9":{start:{line:59,column:16},end:{line:59,column:74}},"10":{start:{line:60,column:4},end:{line:60,column:18}},"11":{start:{line:73,column:20},end:{line:73,column:24}},"12":{start:{line:75,column:16},end:{line:77,column:5}},"13":{start:{line:78,column:4},end:{line:78,column:18}},"14":{start:{line:82,column:0},end:{line:82,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:2},end:{line:20,column:3}},loc:{start:{line:20,column:27},end:{line:24,column:3}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:36,column:2},end:{line:36,column:3}},loc:{start:{line:36,column:33},end:{line:45,column:3}},line:36},"2":{name:"(anonymous_2)",decl:{start:{line:56,column:2},end:{line:56,column:3}},loc:{start:{line:56,column:23},end:{line:61,column:3}},line:56},"3":{name:"(anonymous_3)",decl:{start:{line:72,column:2},end:{line:72,column:3}},loc:{start:{line:72,column:26},end:{line:79,column:3}},line:72}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},f:{"0":0,"1":0,"2":0,"3":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"feba4ade3ba888bb38407e421d0c1bd7699fe785"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_2pxn9dzqnr.s[0]++,require('egg').Controller);/**
 * @Controller Dashboard GW dashboard
 */class DashboardController extends Controller{/**
   * @Summary Get API gateway usage of services
   * @Router GET /gateway/dashboard/services
   * @request query string id "serviceId"
   * @request query string shortcuts "D"/"W"/"M"/"Y"/"ALL" default: W
   * @request query string from "YYYY-MM-DD" overrides shortcuts
   * @request query string to "YYYY-MM-DD" overrides shortcuts
   * @request query string interval "^\d+(y|mo|w|d|h|m|s|ms)" default: 1h
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async usageOfServices(){cov_2pxn9dzqnr.f[0]++;const{ctx}=(cov_2pxn9dzqnr.s[1]++,this);const res=(cov_2pxn9dzqnr.s[2]++,await ctx.service.gateway.dashboard.usageOfServices(ctx.query));cov_2pxn9dzqnr.s[3]++;ctx.body=res;}/**
   * @Summary Get API gateway keys' usage of an application
   * @Router GET /gateway/dashboard/applications/{id}
   * @Request path string *id
   * @request query string shortcuts "D"/"W"/"M"/"Y" default: W
   * @request query string from "YYYY-MM-DD" overrides shortcuts
   * @request query string to "YYYY-MM-DD" overrides shortcuts
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async usageOfOneApplication(){cov_2pxn9dzqnr.f[1]++;const{ctx}=(cov_2pxn9dzqnr.s[4]++,this);const{id}=(cov_2pxn9dzqnr.s[5]++,ctx.params);const res=(cov_2pxn9dzqnr.s[6]++,await ctx.service.gateway.dashboard.usageOfOneApplication(id,ctx.query));cov_2pxn9dzqnr.s[7]++;ctx.body=res;}/**
   * @Summary Get API gateway usage tops
   * @Router GET /gateway/dashboard/tops
   * @request query string shortcuts "D"/"W"/"M"/"Y" default: W
   * @request query string from "YYYY-MM-DD" overrides shortcuts
   * @request query string to "YYYY-MM-DD" overrides shortcuts
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async usageOfTops(){cov_2pxn9dzqnr.f[2]++;const{ctx}=(cov_2pxn9dzqnr.s[8]++,this);const res=(cov_2pxn9dzqnr.s[9]++,await ctx.service.gateway.dashboard.usageOfTops(ctx.query));cov_2pxn9dzqnr.s[10]++;ctx.body=res;}/**
   * @Summary Get API gateway usage info breakdown
   * @Router GET /gateway/dashboard/breakdown
   * @request query string shortcuts "D"/"W"/"M"/"Y" default: W
   * @request query string from "YYYY-MM-DD" overrides shortcuts
   * @request query string to "YYYY-MM-DD" overrides shortcuts
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async usageBreakdown(){cov_2pxn9dzqnr.f[3]++;const{ctx}=(cov_2pxn9dzqnr.s[11]++,this);const res=(cov_2pxn9dzqnr.s[12]++,await ctx.service.gateway.dashboard.usageBreakdown(ctx.query));cov_2pxn9dzqnr.s[13]++;ctx.body=res;}}cov_2pxn9dzqnr.s[14]++;module.exports=DashboardController;