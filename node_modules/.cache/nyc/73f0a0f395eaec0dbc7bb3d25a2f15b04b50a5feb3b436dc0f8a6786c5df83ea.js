'use strict';var cov_tlcfkddqo=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/sonata/productOrder.js";var hash="57f9cfa529fcf166279184d8e54bb13a5981eabc";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/sonata/productOrder.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:24,column:20},end:{line:24,column:24}},"3":{start:{line:26,column:18},end:{line:37,column:5}},"4":{start:{line:39,column:17},end:{line:39,column:66}},"5":{start:{line:41,column:18},end:{line:41,column:51}},"6":{start:{line:42,column:16},end:{line:42,column:38}},"7":{start:{line:44,column:4},end:{line:44,column:42}},"8":{start:{line:45,column:4},end:{line:45,column:30}},"9":{start:{line:46,column:4},end:{line:46,column:38}},"10":{start:{line:48,column:4},end:{line:48,column:40}},"11":{start:{line:59,column:20},end:{line:59,column:24}},"12":{start:{line:60,column:19},end:{line:60,column:29}},"13":{start:{line:62,column:17},end:{line:62,column:63}},"14":{start:{line:63,column:4},end:{line:63,column:19}},"15":{start:{line:74,column:20},end:{line:74,column:24}},"16":{start:{line:78,column:17},end:{line:78,column:79}},"17":{start:{line:79,column:4},end:{line:79,column:19}},"18":{start:{line:83,column:0},end:{line:83,column:39}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:23,column:2},end:{line:23,column:3}},loc:{start:{line:23,column:17},end:{line:49,column:3}},line:23},"1":{name:"(anonymous_1)",decl:{start:{line:58,column:2},end:{line:58,column:3}},loc:{start:{line:58,column:16},end:{line:64,column:3}},line:58},"2":{name:"(anonymous_2)",decl:{start:{line:73,column:2},end:{line:73,column:3}},loc:{start:{line:73,column:18},end:{line:80,column:3}},line:73}},branchMap:{"0":{loc:{start:{line:35,column:33},end:{line:35,column:71}},type:"cond-expr",locations:[{start:{line:35,column:51},end:{line:35,column:66}},{start:{line:35,column:69},end:{line:35,column:71}}],line:35},"1":{loc:{start:{line:36,column:29},end:{line:36,column:68}},type:"cond-expr",locations:[{start:{line:36,column:48},end:{line:36,column:64}},{start:{line:36,column:67},end:{line:36,column:68}}],line:36}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"57f9cfa529fcf166279184d8e54bb13a5981eabc"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_tlcfkddqo.s[0]++,require('egg').Controller);const _=(cov_tlcfkddqo.s[1]++,require('lodash'));/**
 * @Controller productOrder
 */class ProductOrderController extends Controller{/**
   * @Summary List all productOrders
   * @Router GET /mef/productOrderManagement/v3/productOrder
   * @request query string externalId
   * @request query string productOfferingId
   * @request query string productId
   * @request query string state
   * @request query string productProvider
   * @request query integer offset (N-1)*limit, 1 means 0 offset, 2 means 1*limit offset
   * @request query integer limit defualt:10
   * @Response 200 productOrderResp OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_tlcfkddqo.f[0]++;const{ctx}=(cov_tlcfkddqo.s[2]++,this);const query=(cov_tlcfkddqo.s[3]++,{externalId:ctx.query.externalId,// oms uses offeringId
offeringId:ctx.query.productOfferingId,productId:ctx.query.productId,// oms uses orderStateType
orderStateType:ctx.query.state,productProvider:ctx.query.productProvider,// oms uses page and pagesize
pageSize:ctx.helper.toInt(ctx.query.limit?(cov_tlcfkddqo.b[0][0]++,ctx.query.limit):(cov_tlcfkddqo.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.offset?(cov_tlcfkddqo.b[1][0]++,ctx.query.offset):(cov_tlcfkddqo.b[1][1]++,1))});const data=(cov_tlcfkddqo.s[4]++,await ctx.service.sonata.productOrder.list(query));const start=(cov_tlcfkddqo.s[5]++,(query.page-1)*query.pageSize);const end=(cov_tlcfkddqo.s[6]++,start+query.pageSize);// ctx.set('X-Total-Count', data.length); set in service
cov_tlcfkddqo.s[7]++;ctx.set('X-Result-Count',data.length);cov_tlcfkddqo.s[8]++;ctx.set('X-Offset',start);cov_tlcfkddqo.s[9]++;ctx.set('X-Limit',query.pageSize);cov_tlcfkddqo.s[10]++;ctx.body=_.slice(data,start,end);}/**
   * @Summary Get a productOrder by id
   * @Router GET /mef/productOrderManagement/v3/productOrder/{id}
   * @Request path string *id
   * @Response 200 productOrderResp OK
   * @Response 500 error Unknown internal server error
   */async show(){cov_tlcfkddqo.f[1]++;const{ctx}=(cov_tlcfkddqo.s[11]++,this);const{id}=(cov_tlcfkddqo.s[12]++,ctx.params);const data=(cov_tlcfkddqo.s[13]++,await ctx.service.sonata.productOrder.show(id));cov_tlcfkddqo.s[14]++;ctx.body=data;}/**
   * @Summary Create a productOrder
   * @Router POST /mef/productOrderManagement/v3/productOrder
   * @Request body createProductOrderReq *body
   * @Response 201 productOrderResp OK
   * @Response 500 error Unknown internal server error
   */async create(){cov_tlcfkddqo.f[2]++;const{ctx}=(cov_tlcfkddqo.s[15]++,this);// ctx.validate(ctx.rule.productOrderResp, ctx.request.body);
const data=(cov_tlcfkddqo.s[16]++,await ctx.service.sonata.productOrder.create(ctx.request.body));cov_tlcfkddqo.s[17]++;ctx.body=data;}}cov_tlcfkddqo.s[18]++;module.exports=ProductOrderController;