'use strict';var cov_2g861fiuia=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/ums/agent.js";var hash="ecfb1688d208cc149acdf45334eb8cc4ac70e252";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/ums/agent.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:21,column:20},end:{line:21,column:24}},"3":{start:{line:22,column:18},end:{line:25,column:5}},"4":{start:{line:27,column:4},end:{line:27,column:43}},"5":{start:{line:28,column:17},end:{line:28,column:64}},"6":{start:{line:29,column:17},end:{line:33,column:5}},"7":{start:{line:34,column:18},end:{line:34,column:51}},"8":{start:{line:35,column:16},end:{line:35,column:38}},"9":{start:{line:36,column:4},end:{line:39,column:6}},"10":{start:{line:51,column:20},end:{line:51,column:24}},"11":{start:{line:52,column:19},end:{line:52,column:29}},"12":{start:{line:54,column:4},end:{line:56,column:6}},"13":{start:{line:68,column:20},end:{line:68,column:24}},"14":{start:{line:69,column:4},end:{line:69,column:63}},"15":{start:{line:71,column:4},end:{line:73,column:6}},"16":{start:{line:86,column:20},end:{line:86,column:24}},"17":{start:{line:87,column:19},end:{line:87,column:29}},"18":{start:{line:89,column:4},end:{line:89,column:63}},"19":{start:{line:91,column:4},end:{line:93,column:6}},"20":{start:{line:105,column:20},end:{line:105,column:24}},"21":{start:{line:106,column:19},end:{line:106,column:29}},"22":{start:{line:108,column:4},end:{line:110,column:6}},"23":{start:{line:114,column:0},end:{line:114,column:33}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:2},end:{line:20,column:3}},loc:{start:{line:20,column:16},end:{line:40,column:3}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:50,column:2},end:{line:50,column:3}},loc:{start:{line:50,column:15},end:{line:57,column:3}},line:50},"2":{name:"(anonymous_2)",decl:{start:{line:67,column:2},end:{line:67,column:3}},loc:{start:{line:67,column:17},end:{line:74,column:3}},line:67},"3":{name:"(anonymous_3)",decl:{start:{line:85,column:2},end:{line:85,column:3}},loc:{start:{line:85,column:17},end:{line:94,column:3}},line:85},"4":{name:"(anonymous_4)",decl:{start:{line:104,column:2},end:{line:104,column:3}},loc:{start:{line:104,column:18},end:{line:111,column:3}},line:104}},branchMap:{"0":{loc:{start:{line:23,column:33},end:{line:23,column:77}},type:"cond-expr",locations:[{start:{line:23,column:54},end:{line:23,column:72}},{start:{line:23,column:75},end:{line:23,column:77}}],line:23},"1":{loc:{start:{line:24,column:29},end:{line:24,column:64}},type:"cond-expr",locations:[{start:{line:24,column:46},end:{line:24,column:60}},{start:{line:24,column:63},end:{line:24,column:64}}],line:24}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"ecfb1688d208cc149acdf45334eb8cc4ac70e252"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_2g861fiuia.s[0]++,require('egg').Controller);const _=(cov_2g861fiuia.s[1]++,require('lodash'));/**
 * @Controller Agent Management
 */class AgentController extends Controller{/**
   * @Summary List all agents
   * @Router GET /agents
   * @Request query string email
   * @Request query boolean deleted
   * @Request query string roles
   * @Request query string pageSize
   * @Request query string page
   * @Response 200 userList OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_2g861fiuia.f[0]++;const{ctx}=(cov_2g861fiuia.s[2]++,this);const query=(cov_2g861fiuia.s[3]++,{pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_2g861fiuia.b[0][0]++,ctx.query.pageSize):(cov_2g861fiuia.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_2g861fiuia.b[1][0]++,ctx.query.page):(cov_2g861fiuia.b[1][1]++,1))});cov_2g861fiuia.s[4]++;ctx.logger.info('query:%j',ctx.query);const data=(cov_2g861fiuia.s[5]++,await ctx.service.ums.agent.getUsers(ctx.query));const meta=(cov_2g861fiuia.s[6]++,{total:data.length,page:query.page,per_page:query.pageSize});const start=(cov_2g861fiuia.s[7]++,(query.page-1)*query.pageSize);const end=(cov_2g861fiuia.s[8]++,start+query.pageSize);cov_2g861fiuia.s[9]++;ctx.body={data:_.slice(data,start,end),meta};}/**
   * @Summary Get a agent by Id
   * @Router GET /agents/{id}
   * @Request path string *id
   * @Response 200 user OK
   * @Response 404 user not found
   * @Response 500 error Unknown internal server error
   */async show(){cov_2g861fiuia.f[1]++;const{ctx}=(cov_2g861fiuia.s[10]++,this);const{id}=(cov_2g861fiuia.s[11]++,ctx.params);cov_2g861fiuia.s[12]++;ctx.body={data:await ctx.service.ums.agent.findOne(id)};}/**
   * @Summary Create a agent
   * @Router POST /agents
   * @Request body createUserPayload *body
   * @Response 200 user OK
   * @Response 404 user not found
   * @Response 500 error Unknown internal server error
   */async create(){cov_2g861fiuia.f[2]++;const{ctx}=(cov_2g861fiuia.s[13]++,this);cov_2g861fiuia.s[14]++;ctx.validate(ctx.rule.createUserPayload,ctx.request.body);cov_2g861fiuia.s[15]++;ctx.body={data:await ctx.service.ums.agent.create(ctx.request.body)};}/**
   * @Summary Update a agent
   * @Router PATCH /agents/{id}
   * @Request path string *id
   * @Request body updateUserPayload *body
   * @Response 200 user OK
   * @Response 404 user not found
   * @Response 500 error Unknown internal server error
   */async update(){cov_2g861fiuia.f[3]++;const{ctx}=(cov_2g861fiuia.s[16]++,this);const{id}=(cov_2g861fiuia.s[17]++,ctx.params);cov_2g861fiuia.s[18]++;ctx.validate(ctx.rule.updateUserPayload,ctx.request.body);cov_2g861fiuia.s[19]++;ctx.body={data:await ctx.service.ums.agent.update(id,ctx.request.body)};}/**
   * @Summary Delete a agent
   * @Router DELETE /agents/{id}
   * @Request path string *id
   * @Response 200 user OK
   * @Response 404 user not found
   * @Response 500 error Unknown internal server error
   */async destroy(){cov_2g861fiuia.f[4]++;const{ctx}=(cov_2g861fiuia.s[20]++,this);const{id}=(cov_2g861fiuia.s[21]++,ctx.params);cov_2g861fiuia.s[22]++;ctx.body={data:await ctx.service.ums.agent.destroy(id)};}}cov_2g861fiuia.s[23]++;module.exports=AgentController;