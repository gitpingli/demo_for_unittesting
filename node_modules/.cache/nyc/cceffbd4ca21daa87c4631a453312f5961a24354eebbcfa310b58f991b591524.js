'use strict';var cov_16ztenegmg=function(){var path="/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/oms/product.js";var hash="5b6568a6c90fc572a266093e3385a179b6e69937";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/oms/product.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:23,column:20},end:{line:23,column:24}},"3":{start:{line:24,column:18},end:{line:27,column:5}},"4":{start:{line:28,column:79},end:{line:28,column:88}},"5":{start:{line:29,column:17},end:{line:35,column:6}},"6":{start:{line:36,column:17},end:{line:40,column:5}},"7":{start:{line:41,column:18},end:{line:41,column:51}},"8":{start:{line:42,column:16},end:{line:42,column:38}},"9":{start:{line:43,column:4},end:{line:46,column:5}},"10":{start:{line:58,column:20},end:{line:58,column:24}},"11":{start:{line:59,column:19},end:{line:59,column:29}},"12":{start:{line:61,column:4},end:{line:63,column:5}},"13":{start:{line:67,column:0},end:{line:67,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:22,column:2},end:{line:22,column:3}},loc:{start:{line:22,column:17},end:{line:47,column:3}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:57,column:2},end:{line:57,column:3}},loc:{start:{line:57,column:16},end:{line:64,column:3}},line:57}},branchMap:{"0":{loc:{start:{line:25,column:33},end:{line:25,column:77}},type:"cond-expr",locations:[{start:{line:25,column:54},end:{line:25,column:72}},{start:{line:25,column:75},end:{line:25,column:77}}],line:25},"1":{loc:{start:{line:26,column:29},end:{line:26,column:64}},type:"cond-expr",locations:[{start:{line:26,column:46},end:{line:26,column:60}},{start:{line:26,column:63},end:{line:26,column:64}}],line:26}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"5b6568a6c90fc572a266093e3385a179b6e69937"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_16ztenegmg.s[0]++,require('egg').Controller);const _=(cov_16ztenegmg.s[1]++,require('lodash'));/**
 * @Controller ProductInstance Management
 */class ProductController extends Controller{/**
   * @Summary List all existing productInstance
   * @Router GET /productInstances
   * @Request query string companyId consolecore company id
   * @Request query string productId productId definied in CPQ
   * @Request query string productProvider provider definied in CPQ
   * @Request query string orderId orderId definied in OMS
   * @Request query string buyerProductId buyerProductId definied in OMS
   * @Request query string pageSize
   * @Request query string page
   * @Response 200 productInstanceList OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_16ztenegmg.f[0]++;const{ctx}=(cov_16ztenegmg.s[2]++,this);const query=(cov_16ztenegmg.s[3]++,{pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_16ztenegmg.b[0][0]++,ctx.query.pageSize):(cov_16ztenegmg.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_16ztenegmg.b[1][0]++,ctx.query.page):(cov_16ztenegmg.b[1][1]++,1))});const{companyId,productId,productProvider,orderId,buyerProductId}=(cov_16ztenegmg.s[4]++,ctx.query);const data=(cov_16ztenegmg.s[5]++,await ctx.service.oms.product.search({companyId,productId,productProvider,orderId,buyerProductId}));const meta=(cov_16ztenegmg.s[6]++,{total:data.length,page:query.page,per_page:query.pageSize});const start=(cov_16ztenegmg.s[7]++,(query.page-1)*query.pageSize);const end=(cov_16ztenegmg.s[8]++,start+query.pageSize);cov_16ztenegmg.s[9]++;ctx.body={data:_.slice(data,start,end),meta};}/**
   * @Summary Get a productInstance by Id
   * @Router GET /productInstances/{id}
   * @Request path string *id
   * @Response 200 productInstance OK
   * @Response 404
   * @Response 500 error Unknown internal server error
   */async show(){cov_16ztenegmg.f[1]++;const{ctx}=(cov_16ztenegmg.s[10]++,this);const{id}=(cov_16ztenegmg.s[11]++,ctx.params);cov_16ztenegmg.s[12]++;ctx.body={data:await ctx.service.oms.product.findOne(id)};}}cov_16ztenegmg.s[13]++;module.exports=ProductController;