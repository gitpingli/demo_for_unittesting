'use strict';var cov_1n3yjdfhjh=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/gateway/usage.js";var hash="30338ab93c0e5e5c203039ce1e445ab37a50245c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/gateway/usage.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:19,column:20},end:{line:19,column:24}},"2":{start:{line:21,column:16},end:{line:21,column:74}},"3":{start:{line:22,column:4},end:{line:22,column:18}},"4":{start:{line:35,column:20},end:{line:35,column:24}},"5":{start:{line:37,column:16},end:{line:37,column:79}},"6":{start:{line:38,column:4},end:{line:38,column:18}},"7":{start:{line:52,column:20},end:{line:52,column:24}},"8":{start:{line:53,column:19},end:{line:53,column:29}},"9":{start:{line:55,column:16},end:{line:55,column:80}},"10":{start:{line:56,column:4},end:{line:56,column:18}},"11":{start:{line:70,column:20},end:{line:70,column:24}},"12":{start:{line:71,column:19},end:{line:71,column:29}},"13":{start:{line:73,column:16},end:{line:73,column:76}},"14":{start:{line:74,column:4},end:{line:74,column:18}},"15":{start:{line:88,column:20},end:{line:88,column:24}},"16":{start:{line:89,column:19},end:{line:89,column:29}},"17":{start:{line:91,column:16},end:{line:91,column:84}},"18":{start:{line:92,column:4},end:{line:92,column:18}},"19":{start:{line:104,column:20},end:{line:104,column:24}},"20":{start:{line:106,column:16},end:{line:106,column:81}},"21":{start:{line:107,column:4},end:{line:107,column:18}},"22":{start:{line:120,column:20},end:{line:120,column:24}},"23":{start:{line:122,column:16},end:{line:122,column:71}},"24":{start:{line:123,column:4},end:{line:123,column:18}},"25":{start:{line:127,column:0},end:{line:127,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:2},end:{line:18,column:3}},loc:{start:{line:18,column:27},end:{line:23,column:3}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:34,column:2},end:{line:34,column:3}},loc:{start:{line:34,column:32},end:{line:39,column:3}},line:34},"2":{name:"(anonymous_2)",decl:{start:{line:51,column:2},end:{line:51,column:3}},loc:{start:{line:51,column:29},end:{line:57,column:3}},line:51},"3":{name:"(anonymous_3)",decl:{start:{line:69,column:2},end:{line:69,column:3}},loc:{start:{line:69,column:25},end:{line:75,column:3}},line:69},"4":{name:"(anonymous_4)",decl:{start:{line:87,column:2},end:{line:87,column:3}},loc:{start:{line:87,column:33},end:{line:93,column:3}},line:87},"5":{name:"(anonymous_5)",decl:{start:{line:103,column:2},end:{line:103,column:3}},loc:{start:{line:103,column:34},end:{line:108,column:3}},line:103},"6":{name:"(anonymous_6)",decl:{start:{line:119,column:2},end:{line:119,column:3}},loc:{start:{line:119,column:24},end:{line:124,column:3}},line:119}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"30338ab93c0e5e5c203039ce1e445ab37a50245c"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_1n3yjdfhjh.s[0]++,require('egg').Controller);/**
 * @Controller usage
 */class UsageController extends Controller{/**
   * @Summary Get API gateway usage of services
   * @Router GET /gateway/usage/services
   * @request query string from "DD/MM/YYYY"
   * @request query string to "DD/MM/YYYY"
   * @request query string interval "day"/"month"/"hour"
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async usageOfServices(){cov_1n3yjdfhjh.f[0]++;const{ctx}=(cov_1n3yjdfhjh.s[1]++,this);const res=(cov_1n3yjdfhjh.s[2]++,await ctx.service.gateway.usage.usageOfServices(ctx.query));cov_1n3yjdfhjh.s[3]++;ctx.body=res;}/**
   * @Summary Get API gateway total usage of services
   * @Router GET /gateway/usage/total
   * @request query string from "DD/MM/YYYY"
   * @request query string to "DD/MM/YYYY"
   * @request query string by "hits"/success"/"error"
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async totalUsageOfServices(){cov_1n3yjdfhjh.f[1]++;const{ctx}=(cov_1n3yjdfhjh.s[4]++,this);const res=(cov_1n3yjdfhjh.s[5]++,await ctx.service.gateway.usage.totalUsageOfServices(ctx.query));cov_1n3yjdfhjh.s[6]++;ctx.body=res;}/**
   * @Summary Get API gateway usage of a service
   * @Router GET /gateway/usage/services/{id}
   * @Request path string *id
   * @request query string from "DD/MM/YYYY"
   * @request query string to "DD/MM/YYYY"
   * @request query string interval "day"/"month"/"hour"
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async usageOfOneService(){cov_1n3yjdfhjh.f[2]++;const{ctx}=(cov_1n3yjdfhjh.s[7]++,this);const{id}=(cov_1n3yjdfhjh.s[8]++,ctx.params);const res=(cov_1n3yjdfhjh.s[9]++,await ctx.service.gateway.usage.usageOfOneService(id,ctx.query));cov_1n3yjdfhjh.s[10]++;ctx.body=res;}/**
   * @Summary Get API gateway usage of a key
   * @Router GET /gateway/usage/keys/{id}
   * @Request path string *id
   * @request query string from "DD/MM/YYYY"
   * @request query string to "DD/MM/YYYY"
   * @request query string interval "day"/"month"/"hour"
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async usageOfOneKey(){cov_1n3yjdfhjh.f[3]++;const{ctx}=(cov_1n3yjdfhjh.s[11]++,this);const{id}=(cov_1n3yjdfhjh.s[12]++,ctx.params);const res=(cov_1n3yjdfhjh.s[13]++,await ctx.service.gateway.usage.usageOfOneKey(id,ctx.query));cov_1n3yjdfhjh.s[14]++;ctx.body=res;}/**
   * @Summary Get API gateway keys' usage of an application
   * @Router GET /gateway/usage/applications/{id}
   * @Request path string *id
   * @request query string from "DD/MM/YYYY"
   * @request query string to "DD/MM/YYYY"
   * @request query string interval "day"/"month"/"hour"
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async usageOfOneApplication(){cov_1n3yjdfhjh.f[4]++;const{ctx}=(cov_1n3yjdfhjh.s[15]++,this);const{id}=(cov_1n3yjdfhjh.s[16]++,ctx.params);const res=(cov_1n3yjdfhjh.s[17]++,await ctx.service.gateway.usage.usageOfOneApplication(id,ctx.query));cov_1n3yjdfhjh.s[18]++;ctx.body=res;}/**
   * @Summary Get API gateway usage error information by category
   * @Router GET /gateway/usage/errors/category
   * @request query string from "DD/MM/YYYY"
   * @request query string to "DD/MM/YYYY"
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async usageOfErrorByCategory(){cov_1n3yjdfhjh.f[5]++;const{ctx}=(cov_1n3yjdfhjh.s[19]++,this);const res=(cov_1n3yjdfhjh.s[20]++,await ctx.service.gateway.usage.usageOfErrorByCategory(ctx.query));cov_1n3yjdfhjh.s[21]++;ctx.body=res;}/**
   * @Summary Get API gateway usage error information
   * @Router GET /gateway/usage/errors
   * @request query string from "DD/MM/YYYY"
   * @request query string to "DD/MM/YYYY"
   * @request query string interval "day"/"month"/"hour"
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async usageOfError(){cov_1n3yjdfhjh.f[6]++;const{ctx}=(cov_1n3yjdfhjh.s[22]++,this);const res=(cov_1n3yjdfhjh.s[23]++,await ctx.service.gateway.usage.usageOfError(ctx.query));cov_1n3yjdfhjh.s[24]++;ctx.body=res;}}cov_1n3yjdfhjh.s[25]++;module.exports=UsageController;