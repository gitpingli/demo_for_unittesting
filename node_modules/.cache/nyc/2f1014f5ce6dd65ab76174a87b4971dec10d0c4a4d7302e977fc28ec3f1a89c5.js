'use strict';var cov_5kdwqhoqo=function(){var path="/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/singlespa.js";var hash="42e2fb5945439544a218a0300901da6cc13e962a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/singlespa.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:18,column:20},end:{line:18,column:24}},"3":{start:{line:19,column:18},end:{line:22,column:5}},"4":{start:{line:23,column:17},end:{line:23,column:60}},"5":{start:{line:24,column:17},end:{line:28,column:5}},"6":{start:{line:29,column:18},end:{line:29,column:51}},"7":{start:{line:30,column:16},end:{line:30,column:38}},"8":{start:{line:31,column:4},end:{line:34,column:5}},"9":{start:{line:44,column:20},end:{line:44,column:24}},"10":{start:{line:45,column:18},end:{line:48,column:5}},"11":{start:{line:49,column:17},end:{line:49,column:56}},"12":{start:{line:50,column:17},end:{line:52,column:5}},"13":{start:{line:53,column:4},end:{line:56,column:5}},"14":{start:{line:67,column:20},end:{line:67,column:24}},"15":{start:{line:68,column:19},end:{line:68,column:29}},"16":{start:{line:70,column:22},end:{line:70,column:62}},"17":{start:{line:71,column:4},end:{line:73,column:5}},"18":{start:{line:84,column:20},end:{line:84,column:24}},"19":{start:{line:86,column:4},end:{line:86,column:67}},"20":{start:{line:88,column:22},end:{line:88,column:74}},"21":{start:{line:89,column:4},end:{line:91,column:5}},"22":{start:{line:103,column:20},end:{line:103,column:24}},"23":{start:{line:104,column:19},end:{line:104,column:29}},"24":{start:{line:105,column:22},end:{line:105,column:38}},"25":{start:{line:107,column:4},end:{line:107,column:60}},"26":{start:{line:109,column:29},end:{line:112,column:5}},"27":{start:{line:113,column:4},end:{line:115,column:5}},"28":{start:{line:126,column:20},end:{line:126,column:24}},"29":{start:{line:127,column:19},end:{line:127,column:29}},"30":{start:{line:129,column:22},end:{line:129,column:61}},"31":{start:{line:130,column:4},end:{line:132,column:5}},"32":{start:{line:136,column:0},end:{line:136,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:2},end:{line:17,column:3}},loc:{start:{line:17,column:17},end:{line:35,column:3}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:43,column:2},end:{line:43,column:3}},loc:{start:{line:43,column:22},end:{line:57,column:3}},line:43},"2":{name:"(anonymous_2)",decl:{start:{line:66,column:2},end:{line:66,column:3}},loc:{start:{line:66,column:16},end:{line:74,column:3}},line:66},"3":{name:"(anonymous_3)",decl:{start:{line:83,column:2},end:{line:83,column:3}},loc:{start:{line:83,column:18},end:{line:92,column:3}},line:83},"4":{name:"(anonymous_4)",decl:{start:{line:102,column:2},end:{line:102,column:3}},loc:{start:{line:102,column:18},end:{line:116,column:3}},line:102},"5":{name:"(anonymous_5)",decl:{start:{line:125,column:2},end:{line:125,column:3}},loc:{start:{line:125,column:19},end:{line:133,column:3}},line:125}},branchMap:{"0":{loc:{start:{line:20,column:33},end:{line:20,column:77}},type:"cond-expr",locations:[{start:{line:20,column:54},end:{line:20,column:72}},{start:{line:20,column:75},end:{line:20,column:77}}],line:20},"1":{loc:{start:{line:21,column:29},end:{line:21,column:64}},type:"cond-expr",locations:[{start:{line:21,column:46},end:{line:21,column:60}},{start:{line:21,column:63},end:{line:21,column:64}}],line:21}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"42e2fb5945439544a218a0300901da6cc13e962a"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_5kdwqhoqo.s[0]++,require('egg').Controller);const _=(cov_5kdwqhoqo.s[1]++,require('lodash'));/**
 * @Controller Singlespa Management
 */class SinglespaController extends Controller{/**
   * @Summary List all existing singlespa
   * @Router GET /singlespas
   * @Request query string pageSize
   * @Request query string page
   * @Response 200 offeringList OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_5kdwqhoqo.f[0]++;const{ctx}=(cov_5kdwqhoqo.s[2]++,this);const query=(cov_5kdwqhoqo.s[3]++,{pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_5kdwqhoqo.b[0][0]++,ctx.query.pageSize):(cov_5kdwqhoqo.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_5kdwqhoqo.b[1][0]++,ctx.query.page):(cov_5kdwqhoqo.b[1][1]++,1))});const data=(cov_5kdwqhoqo.s[4]++,await ctx.service.singlespa.list(ctx.query));const meta=(cov_5kdwqhoqo.s[5]++,{total:data.length,page:query.page,per_page:query.pageSize});const start=(cov_5kdwqhoqo.s[6]++,(query.page-1)*query.pageSize);const end=(cov_5kdwqhoqo.s[7]++,start+query.pageSize);cov_5kdwqhoqo.s[8]++;ctx.body={data:_.slice(data,start,end),meta};}/**
   * @Summary List all Active singlespa
   * @Router GET /singlespa/findActive
   * @Response 200 offeringList OK
   * @Response 500 error Unknown internal server error
   */async findActive(){cov_5kdwqhoqo.f[1]++;const{ctx}=(cov_5kdwqhoqo.s[9]++,this);const query=(cov_5kdwqhoqo.s[10]++,{deleted:false,active:true});const data=(cov_5kdwqhoqo.s[11]++,await ctx.service.singlespa.list(query));const meta=(cov_5kdwqhoqo.s[12]++,{total:data.length});cov_5kdwqhoqo.s[13]++;ctx.body={data:data,meta};}/**
   * @Summary Get an singlespa by id
   * @Router GET /singlespas/{id}
   * @Request path string *id
   * @Response 200 serviceDetail OK
   * @Response 500 error Unknown internal server error
   */async show(){cov_5kdwqhoqo.f[2]++;const{ctx}=(cov_5kdwqhoqo.s[14]++,this);const{id}=(cov_5kdwqhoqo.s[15]++,ctx.params);const singlespa=(cov_5kdwqhoqo.s[16]++,await ctx.service.singlespa.findById(id));cov_5kdwqhoqo.s[17]++;ctx.body={data:singlespa};}/**
   * @Summary Create an Singlespa
   * @Router POST /singlespas
   * @Request body createServicePayload *body
   * @Response 200 createdService OK
   * @Response 500 error Unknown internal server error
   */async create(){cov_5kdwqhoqo.f[3]++;const{ctx}=(cov_5kdwqhoqo.s[18]++,this);cov_5kdwqhoqo.s[19]++;ctx.validate(ctx.rule.createSinglespaPayload,ctx.request.body);const singlespa=(cov_5kdwqhoqo.s[20]++,await ctx.service.singlespa.create(ctx.request.body));cov_5kdwqhoqo.s[21]++;ctx.body={data:singlespa};}/**
   * @Summary Update an Singlespa
   * @Router PATCH /singlespas/{id}
   * @Request path string *id
   * @Request body createServicePayload *body
   * @Response 200 createdService OK
   * @Response 500 error Unknown internal server error
   */async update(){cov_5kdwqhoqo.f[4]++;const{ctx}=(cov_5kdwqhoqo.s[22]++,this);const{id}=(cov_5kdwqhoqo.s[23]++,ctx.params);const newValues=(cov_5kdwqhoqo.s[24]++,ctx.request.body);cov_5kdwqhoqo.s[25]++;ctx.validate(ctx.rule.createSinglespaPayload,newValues);const updatedSinglespa=(cov_5kdwqhoqo.s[26]++,await ctx.service.singlespa.update(newValues,id));cov_5kdwqhoqo.s[27]++;ctx.body={data:updatedSinglespa};}/**
   * @Summary Delete an Singlespa
   * @Router DELETE /singlespas/{id}
   * @Request path string *id
   * @Response 200 createdService OK
   * @Response 500 error Unknown internal server error
   */async destroy(){cov_5kdwqhoqo.f[5]++;const{ctx}=(cov_5kdwqhoqo.s[28]++,this);const{id}=(cov_5kdwqhoqo.s[29]++,ctx.params);const singlespa=(cov_5kdwqhoqo.s[30]++,await ctx.service.singlespa.destroy(id));cov_5kdwqhoqo.s[31]++;ctx.body={data:singlespa};}}cov_5kdwqhoqo.s[32]++;module.exports=SinglespaController;