'use strict';var cov_2cj682yv8k=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/workflow/worker.js";var hash="2e4ecec970799ecb1ee20eca1ff5f7884b48f544";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/workflow/worker.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:10,column:20},end:{line:10,column:24}},"3":{start:{line:11,column:16},end:{line:16,column:5}},"4":{start:{line:17,column:4},end:{line:17,column:46}},"5":{start:{line:29,column:20},end:{line:29,column:24}},"6":{start:{line:30,column:18},end:{line:33,column:5}},"7":{start:{line:34,column:17},end:{line:34,column:57}},"8":{start:{line:35,column:19},end:{line:53,column:7}},"9":{start:{line:36,column:6},end:{line:52,column:7}},"10":{start:{line:54,column:17},end:{line:58,column:5}},"11":{start:{line:59,column:18},end:{line:59,column:51}},"12":{start:{line:60,column:16},end:{line:60,column:38}},"13":{start:{line:61,column:4},end:{line:64,column:5}},"14":{start:{line:76,column:20},end:{line:76,column:24}},"15":{start:{line:77,column:19},end:{line:77,column:29}},"16":{start:{line:78,column:17},end:{line:78,column:63}},"17":{start:{line:79,column:19},end:{line:97,column:7}},"18":{start:{line:80,column:6},end:{line:96,column:7}},"19":{start:{line:98,column:4},end:{line:98,column:21}},"20":{start:{line:109,column:20},end:{line:109,column:24}},"21":{start:{line:110,column:4},end:{line:110,column:56}},"22":{start:{line:112,column:19},end:{line:112,column:35}},"23":{start:{line:114,column:4},end:{line:119,column:5}},"24":{start:{line:115,column:26},end:{line:115,column:48}},"25":{start:{line:116,column:16},end:{line:116,column:48}},"26":{start:{line:117,column:6},end:{line:117,column:32}},"27":{start:{line:118,column:6},end:{line:118,column:35}},"28":{start:{line:121,column:4},end:{line:123,column:5}},"29":{start:{line:127,column:0},end:{line:127,column:41}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:2},end:{line:9,column:3}},loc:{start:{line:9,column:41},end:{line:18,column:3}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:17},end:{line:65,column:3}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:35,column:49},end:{line:35,column:50}},loc:{start:{line:35,column:62},end:{line:53,column:5}},line:35},"3":{name:"(anonymous_3)",decl:{start:{line:75,column:2},end:{line:75,column:3}},loc:{start:{line:75,column:16},end:{line:99,column:3}},line:75},"4":{name:"(anonymous_4)",decl:{start:{line:79,column:49},end:{line:79,column:50}},loc:{start:{line:79,column:62},end:{line:97,column:5}},line:79},"5":{name:"(anonymous_5)",decl:{start:{line:108,column:2},end:{line:108,column:3}},loc:{start:{line:108,column:18},end:{line:124,column:3}},line:108}},branchMap:{"0":{loc:{start:{line:31,column:33},end:{line:31,column:77}},type:"cond-expr",locations:[{start:{line:31,column:54},end:{line:31,column:72}},{start:{line:31,column:75},end:{line:31,column:77}}],line:31},"1":{loc:{start:{line:32,column:29},end:{line:32,column:64}},type:"cond-expr",locations:[{start:{line:32,column:46},end:{line:32,column:60}},{start:{line:32,column:63},end:{line:32,column:64}}],line:32},"2":{loc:{start:{line:114,column:4},end:{line:119,column:5}},type:"if",locations:[{start:{line:114,column:4},end:{line:119,column:5}},{start:{line:114,column:4},end:{line:119,column:5}}],line:114}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"2e4ecec970799ecb1ee20eca1ff5f7884b48f544"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_2cj682yv8k.s[0]++,require('egg').Controller);const _=(cov_2cj682yv8k.s[1]++,require('lodash'));/**
 * @Controller Workflow_Worker Management
 */class WorkflowWorkerController extends Controller{async curl(method,endpoint,payload){cov_2cj682yv8k.f[0]++;const{ctx}=(cov_2cj682yv8k.s[2]++,this);const req=(cov_2cj682yv8k.s[3]++,{name:'workflow',method,endpoint,payload});cov_2cj682yv8k.s[4]++;return await ctx.service.backend.curl(req);}/**
   * @Summary List all deployed bpmns
   * @Router GET /workflows/workers
   * @Request query string pageSize
   * @Request query string page
   * @Response 200
   * @Response 500 error Unknown internal server error
   */async index(){cov_2cj682yv8k.f[1]++;const{ctx}=(cov_2cj682yv8k.s[5]++,this);const query=(cov_2cj682yv8k.s[6]++,{pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_2cj682yv8k.b[0][0]++,ctx.query.pageSize):(cov_2cj682yv8k.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_2cj682yv8k.b[1][0]++,ctx.query.page):(cov_2cj682yv8k.b[1][1]++,1))});const jobs=(cov_2cj682yv8k.s[7]++,await this.curl('GET','/jobworkers/v1'));const result=(cov_2cj682yv8k.s[8]++,await Promise.all(_.map(jobs,async job=>{cov_2cj682yv8k.f[2]++;cov_2cj682yv8k.s[9]++;return{job:{jobId:job.key,elementId:job.value.workflowKey,bpmnProcessId:job.value.bpmnProcessId,workflowDefinitionVersion:job.value.workflowDefinitionVersion,type:job.value.type,elementInstanceKey:job.value.elementInstanceKey,workflowKey:job.value.workflowKey,workflowInstanceKey:job.value.workflowInstanceKey,retries:job.value.retries,variables:job.value.variables,errorMessage:job.value.errorMessage,errorCode:job.value.errorCode,customHeaders:job.value.customHeaders}};})));const meta=(cov_2cj682yv8k.s[10]++,{total:result.length,page:query.page,per_page:query.pageSize});const start=(cov_2cj682yv8k.s[11]++,(query.page-1)*query.pageSize);const end=(cov_2cj682yv8k.s[12]++,start+query.pageSize);cov_2cj682yv8k.s[13]++;ctx.body={data:_.slice(result,start,end),meta};}/**
   * @Summary Get a  worker by id
   * @Router GET /workflows/workers/{id}
   * @Request path string *id
   * @Response 200
   * @Response 404
   * @Response 500 error Unknown internal server error
   */async show(){cov_2cj682yv8k.f[3]++;const{ctx}=(cov_2cj682yv8k.s[14]++,this);const{id}=(cov_2cj682yv8k.s[15]++,ctx.params);const jobs=(cov_2cj682yv8k.s[16]++,await this.curl('GET',`/jobworkers/v1/${id}`));const result=(cov_2cj682yv8k.s[17]++,await Promise.all(_.map(jobs,async job=>{cov_2cj682yv8k.f[4]++;cov_2cj682yv8k.s[18]++;return{job:{jobId:job.key,elementId:job.value.workflowKey,bpmnProcessId:job.value.bpmnProcessId,workflowDefinitionVersion:job.value.workflowDefinitionVersion,type:job.value.type,elementInstanceKey:job.value.elementInstanceKey,workflowKey:job.value.workflowKey,workflowInstanceKey:job.value.workflowInstanceKey,retries:job.value.retries,variables:job.value.variables,errorMessage:job.value.errorMessage,errorCode:job.value.errorCode,customHeaders:job.value.customHeaders}};})));cov_2cj682yv8k.s[19]++;ctx.body=result;}/**
   * @Summary Create a worker
   * @Router POST /workflows/workers
   * @Request query string jobType
   * @Request body workerModel *body
   * @Response 200
   */async create(){cov_2cj682yv8k.f[5]++;const{ctx}=(cov_2cj682yv8k.s[20]++,this);cov_2cj682yv8k.s[21]++;ctx.validate(ctx.rule.workerModel,ctx.request.body);let endpoint=(cov_2cj682yv8k.s[22]++,'/jobworkers/v1');cov_2cj682yv8k.s[23]++;if(ctx.query){cov_2cj682yv8k.b[2][0]++;const querystring=(cov_2cj682yv8k.s[24]++,require('querystring'));const q=(cov_2cj682yv8k.s[25]++,querystring.stringify(ctx.query));cov_2cj682yv8k.s[26]++;ctx.logger.info('q:%s',q);cov_2cj682yv8k.s[27]++;endpoint=endpoint+`?${q}`;}else{cov_2cj682yv8k.b[2][1]++;}cov_2cj682yv8k.s[28]++;ctx.body={data:await this.curl('POST',endpoint,ctx.request.body)};}}cov_2cj682yv8k.s[29]++;module.exports=WorkflowWorkerController;