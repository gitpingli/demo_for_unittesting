'use strict';var cov_ldpu2sv6f=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/gateway/service.js";var hash="11dd06b09e5dede32c43ce582d74ff88bd8b75b5";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/gateway/service.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:22,column:20},end:{line:22,column:24}},"3":{start:{line:24,column:18},end:{line:30,column:5}},"4":{start:{line:32,column:17},end:{line:32,column:62}},"5":{start:{line:33,column:17},end:{line:37,column:5}},"6":{start:{line:38,column:18},end:{line:38,column:51}},"7":{start:{line:39,column:16},end:{line:39,column:38}},"8":{start:{line:40,column:4},end:{line:43,column:5}},"9":{start:{line:54,column:20},end:{line:54,column:24}},"10":{start:{line:55,column:19},end:{line:55,column:29}},"11":{start:{line:57,column:20},end:{line:57,column:66}},"12":{start:{line:58,column:4},end:{line:60,column:5}},"13":{start:{line:71,column:20},end:{line:71,column:24}},"14":{start:{line:73,column:4},end:{line:73,column:65}},"15":{start:{line:75,column:19},end:{line:75,column:77}},"16":{start:{line:76,column:4},end:{line:78,column:5}},"17":{start:{line:90,column:20},end:{line:90,column:24}},"18":{start:{line:91,column:19},end:{line:91,column:29}},"19":{start:{line:92,column:22},end:{line:92,column:38}},"20":{start:{line:94,column:4},end:{line:94,column:58}},"21":{start:{line:96,column:27},end:{line:99,column:5}},"22":{start:{line:100,column:4},end:{line:102,column:5}},"23":{start:{line:113,column:20},end:{line:113,column:24}},"24":{start:{line:114,column:19},end:{line:114,column:29}},"25":{start:{line:116,column:20},end:{line:116,column:65}},"26":{start:{line:117,column:4},end:{line:119,column:5}},"27":{start:{line:123,column:0},end:{line:123,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:21,column:2},end:{line:21,column:3}},loc:{start:{line:21,column:17},end:{line:44,column:3}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:53,column:2},end:{line:53,column:3}},loc:{start:{line:53,column:16},end:{line:61,column:3}},line:53},"2":{name:"(anonymous_2)",decl:{start:{line:70,column:2},end:{line:70,column:3}},loc:{start:{line:70,column:18},end:{line:79,column:3}},line:70},"3":{name:"(anonymous_3)",decl:{start:{line:89,column:2},end:{line:89,column:3}},loc:{start:{line:89,column:18},end:{line:103,column:3}},line:89},"4":{name:"(anonymous_4)",decl:{start:{line:112,column:2},end:{line:112,column:3}},loc:{start:{line:112,column:19},end:{line:120,column:3}},line:112}},branchMap:{"0":{loc:{start:{line:28,column:33},end:{line:28,column:77}},type:"cond-expr",locations:[{start:{line:28,column:54},end:{line:28,column:72}},{start:{line:28,column:75},end:{line:28,column:77}}],line:28},"1":{loc:{start:{line:29,column:29},end:{line:29,column:64}},type:"cond-expr",locations:[{start:{line:29,column:46},end:{line:29,column:60}},{start:{line:29,column:63},end:{line:29,column:64}}],line:29}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"11dd06b09e5dede32c43ce582d74ff88bd8b75b5"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_ldpu2sv6f.s[0]++,require('egg').Controller);const _=(cov_ldpu2sv6f.s[1]++,require('lodash'));/**
 * @Controller Service Management
 */class ServiceController extends Controller{/**
   * @Summary List all services
   * @Router GET /gateway/services
   * @request query integer page
   * @request query integer pageSize
   * @request query string name
   * @request query boolean deleted
   * @request query boolean authMode
   * @Response 200 createdService OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_ldpu2sv6f.f[0]++;const{ctx}=(cov_ldpu2sv6f.s[2]++,this);const query=(cov_ldpu2sv6f.s[3]++,{name:ctx.query.name,deleted:ctx.query.deleted,authMode:ctx.query.authMode,pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_ldpu2sv6f.b[0][0]++,ctx.query.pageSize):(cov_ldpu2sv6f.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_ldpu2sv6f.b[1][0]++,ctx.query.page):(cov_ldpu2sv6f.b[1][1]++,1))});const data=(cov_ldpu2sv6f.s[4]++,await ctx.service.gateway.service.list(query));const meta=(cov_ldpu2sv6f.s[5]++,{total:data.length,page:query.page,per_page:query.pageSize});const start=(cov_ldpu2sv6f.s[6]++,(query.page-1)*query.pageSize);const end=(cov_ldpu2sv6f.s[7]++,start+query.pageSize);cov_ldpu2sv6f.s[8]++;ctx.body={data:_.slice(data,start,end),meta};}/**
   * @Summary Get an service by id
   * @Router GET /gateway/services/{id}
   * @Request path string *id
   * @Response 200 serviceDetail OK
   * @Response 500 error Unknown internal server error
   */async show(){cov_ldpu2sv6f.f[1]++;const{ctx}=(cov_ldpu2sv6f.s[9]++,this);const{id}=(cov_ldpu2sv6f.s[10]++,ctx.params);const service=(cov_ldpu2sv6f.s[11]++,await ctx.service.gateway.service.findById(id));cov_ldpu2sv6f.s[12]++;ctx.body={data:service};}/**
   * @Summary Create an service
   * @Router POST /gateway/services
   * @Request body createServicePayload *body
   * @Response 200 createdService OK
   * @Response 500 error Unknown internal server error
   */async create(){cov_ldpu2sv6f.f[2]++;const{ctx}=(cov_ldpu2sv6f.s[13]++,this);cov_ldpu2sv6f.s[14]++;ctx.validate(ctx.rule.createServicePayload,ctx.request.body);const result=(cov_ldpu2sv6f.s[15]++,await ctx.service.gateway.service.create(ctx.request.body));cov_ldpu2sv6f.s[16]++;ctx.body={data:result};}/**
   * @Summary Update an service
   * @Router PATCH /gateway/services/{id}
   * @Request path string *id
   * @Request body createServicePayload *body
   * @Response 200 createdService OK
   * @Response 500 error Unknown internal server error
   */async update(){cov_ldpu2sv6f.f[3]++;const{ctx}=(cov_ldpu2sv6f.s[17]++,this);const{id}=(cov_ldpu2sv6f.s[18]++,ctx.params);const newValues=(cov_ldpu2sv6f.s[19]++,ctx.request.body);cov_ldpu2sv6f.s[20]++;ctx.validate(ctx.rule.createServicePayload,newValues);const updatedService=(cov_ldpu2sv6f.s[21]++,await ctx.service.gateway.service.update(newValues,id));cov_ldpu2sv6f.s[22]++;ctx.body={data:updatedService};}/**
   * @Summary Delete an service
   * @Router DELETE /gateway/services/{id}
   * @Request path string *id
   * @Response 200 createdService OK
   * @Response 500 error Unknown internal server error
   */async destroy(){cov_ldpu2sv6f.f[4]++;const{ctx}=(cov_ldpu2sv6f.s[23]++,this);const{id}=(cov_ldpu2sv6f.s[24]++,ctx.params);const service=(cov_ldpu2sv6f.s[25]++,await ctx.service.gateway.service.destroy(id));cov_ldpu2sv6f.s[26]++;ctx.body={data:service};}}cov_ldpu2sv6f.s[27]++;module.exports=ServiceController;