'use strict';var cov_2m5zwrdvzw=function(){var path="/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/ums/wallet.js";var hash="c94598db315efe5173392a55c8d6f0b9b5e5220e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/pingli/workspace/repository/pccw/demo/sherpa-api/console-core-service-sherpa/app/controller/ums/wallet.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:17,column:20},end:{line:17,column:24}},"2":{start:{line:18,column:26},end:{line:18,column:36}},"3":{start:{line:20,column:17},end:{line:20,column:61}},"4":{start:{line:21,column:17},end:{line:25,column:5}},"5":{start:{line:26,column:4},end:{line:29,column:5}},"6":{start:{line:42,column:20},end:{line:42,column:24}},"7":{start:{line:43,column:30},end:{line:43,column:40}},"8":{start:{line:45,column:4},end:{line:47,column:5}},"9":{start:{line:60,column:20},end:{line:60,column:24}},"10":{start:{line:61,column:26},end:{line:61,column:36}},"11":{start:{line:63,column:4},end:{line:63,column:64}},"12":{start:{line:65,column:4},end:{line:67,column:5}},"13":{start:{line:81,column:20},end:{line:81,column:24}},"14":{start:{line:82,column:30},end:{line:82,column:40}},"15":{start:{line:84,column:4},end:{line:84,column:64}},"16":{start:{line:85,column:4},end:{line:91,column:5}},"17":{start:{line:104,column:20},end:{line:104,column:24}},"18":{start:{line:105,column:30},end:{line:105,column:40}},"19":{start:{line:107,column:4},end:{line:109,column:5}},"20":{start:{line:113,column:0},end:{line:113,column:33}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:2},end:{line:16,column:3}},loc:{start:{line:16,column:17},end:{line:30,column:3}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:41,column:2},end:{line:41,column:3}},loc:{start:{line:41,column:16},end:{line:48,column:3}},line:41},"2":{name:"(anonymous_2)",decl:{start:{line:59,column:2},end:{line:59,column:3}},loc:{start:{line:59,column:18},end:{line:68,column:3}},line:59},"3":{name:"(anonymous_3)",decl:{start:{line:80,column:2},end:{line:80,column:3}},loc:{start:{line:80,column:18},end:{line:92,column:3}},line:80},"4":{name:"(anonymous_4)",decl:{start:{line:103,column:2},end:{line:103,column:3}},loc:{start:{line:103,column:19},end:{line:110,column:3}},line:103}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"c94598db315efe5173392a55c8d6f0b9b5e5220e"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_2m5zwrdvzw.s[0]++,require('egg').Controller);/**
 * @Controller Wallet Management
 */class WalletController extends Controller{/**
   * @Summary List a company's wallets
   * @Router GET /companies/{companyId}/wallets
   * @Request path string *companyId
   * @Response 200 company OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_2m5zwrdvzw.f[0]++;const{ctx}=(cov_2m5zwrdvzw.s[1]++,this);const{companyId}=(cov_2m5zwrdvzw.s[2]++,ctx.params);const data=(cov_2m5zwrdvzw.s[3]++,await ctx.service.ums.wallet.list(companyId));const meta=(cov_2m5zwrdvzw.s[4]++,{total:data.length,page:1,per_page:100});cov_2m5zwrdvzw.s[5]++;ctx.body={data,meta};}/**
   * @Summary Get a wallet by Id
   * @Router GET /companies/{companyId}/wallets/{id}
   * @Request path string *companyId
   * @Request path string *id
   * @Response 200 walletList OK
   * @Response 404 wallet not found
   * @Response 500 error Unknown internal server error
   */async show(){cov_2m5zwrdvzw.f[1]++;const{ctx}=(cov_2m5zwrdvzw.s[6]++,this);const{companyId,id}=(cov_2m5zwrdvzw.s[7]++,ctx.params);cov_2m5zwrdvzw.s[8]++;ctx.body={data:await ctx.service.ums.wallet.findOne(companyId,id)};}/**
   * @Summary Add a wallet into company
   * @Router POST /companies/{companyId}/wallets
   * @Request path string *companyId
   * @Request body createWalletPayload *body
   * @Response 200 wallet OK
   * @Response 404 wallet not found
   * @Response 500 error Unknown internal server error
   */async create(){cov_2m5zwrdvzw.f[2]++;const{ctx}=(cov_2m5zwrdvzw.s[9]++,this);const{companyId}=(cov_2m5zwrdvzw.s[10]++,ctx.params);cov_2m5zwrdvzw.s[11]++;ctx.validate(ctx.rule.createWalletPayload,ctx.request.body);cov_2m5zwrdvzw.s[12]++;ctx.body={data:await ctx.service.ums.wallet.create(companyId,ctx.request.body)};}/**
   * @Summary Update a wallet
   * @Router PATCH /companies/{companyId}/wallets/{id}
   * @Request path string *companyId
   * @Request path string *id
   * @Request body updateWalletPayload *body
   * @Response 200 wallet OK
   * @Response 404 wallet not found
   * @Response 500 error Unknown internal server error
   */async update(){cov_2m5zwrdvzw.f[3]++;const{ctx}=(cov_2m5zwrdvzw.s[13]++,this);const{companyId,id}=(cov_2m5zwrdvzw.s[14]++,ctx.params);cov_2m5zwrdvzw.s[15]++;ctx.validate(ctx.rule.updateWalletPayload,ctx.request.body);cov_2m5zwrdvzw.s[16]++;ctx.body={data:await ctx.service.ums.wallet.update(companyId,id,ctx.request.body)};}/**
   * @Summary Delete a wallet
   * @Router DELETE /companies/{companyId}/wallets/{id}
   * @Request path string *companyId
   * @Request path string *id
   * @Response 200 wallet OK
   * @Response 404 wallet not found
   * @Response 500 error Unknown internal server error
   */async destroy(){cov_2m5zwrdvzw.f[4]++;const{ctx}=(cov_2m5zwrdvzw.s[17]++,this);const{companyId,id}=(cov_2m5zwrdvzw.s[18]++,ctx.params);cov_2m5zwrdvzw.s[19]++;ctx.body={data:await ctx.service.ums.wallet.destroy(companyId,id)};}}cov_2m5zwrdvzw.s[20]++;module.exports=WalletController;