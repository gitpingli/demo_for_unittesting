'use strict';var cov_2e1nfd9631=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/gateway/key.js";var hash="af94c4c4d82a366cf5e4291644b18a4200cda6dc";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/gateway/key.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:20,column:20},end:{line:20,column:24}},"3":{start:{line:22,column:18},end:{line:26,column:5}},"4":{start:{line:28,column:17},end:{line:28,column:58}},"5":{start:{line:29,column:17},end:{line:33,column:5}},"6":{start:{line:34,column:18},end:{line:34,column:51}},"7":{start:{line:35,column:16},end:{line:35,column:38}},"8":{start:{line:36,column:4},end:{line:39,column:6}},"9":{start:{line:50,column:20},end:{line:50,column:24}},"10":{start:{line:51,column:19},end:{line:51,column:29}},"11":{start:{line:53,column:16},end:{line:53,column:58}},"12":{start:{line:54,column:4},end:{line:56,column:6}},"13":{start:{line:67,column:20},end:{line:67,column:24}},"14":{start:{line:69,column:4},end:{line:69,column:65}},"15":{start:{line:71,column:19},end:{line:71,column:73}},"16":{start:{line:72,column:4},end:{line:74,column:6}},"17":{start:{line:86,column:20},end:{line:86,column:24}},"18":{start:{line:87,column:19},end:{line:87,column:29}},"19":{start:{line:88,column:22},end:{line:88,column:38}},"20":{start:{line:90,column:4},end:{line:90,column:58}},"21":{start:{line:92,column:23},end:{line:92,column:74}},"22":{start:{line:93,column:4},end:{line:95,column:6}},"23":{start:{line:106,column:20},end:{line:106,column:24}},"24":{start:{line:107,column:19},end:{line:107,column:29}},"25":{start:{line:109,column:23},end:{line:109,column:64}},"26":{start:{line:110,column:4},end:{line:112,column:6}},"27":{start:{line:116,column:0},end:{line:116,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:2},end:{line:19,column:3}},loc:{start:{line:19,column:16},end:{line:40,column:3}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:49,column:2},end:{line:49,column:3}},loc:{start:{line:49,column:15},end:{line:57,column:3}},line:49},"2":{name:"(anonymous_2)",decl:{start:{line:66,column:2},end:{line:66,column:3}},loc:{start:{line:66,column:17},end:{line:75,column:3}},line:66},"3":{name:"(anonymous_3)",decl:{start:{line:85,column:2},end:{line:85,column:3}},loc:{start:{line:85,column:17},end:{line:96,column:3}},line:85},"4":{name:"(anonymous_4)",decl:{start:{line:105,column:2},end:{line:105,column:3}},loc:{start:{line:105,column:18},end:{line:113,column:3}},line:105}},branchMap:{"0":{loc:{start:{line:24,column:33},end:{line:24,column:77}},type:"cond-expr",locations:[{start:{line:24,column:54},end:{line:24,column:72}},{start:{line:24,column:75},end:{line:24,column:77}}],line:24},"1":{loc:{start:{line:25,column:29},end:{line:25,column:64}},type:"cond-expr",locations:[{start:{line:25,column:46},end:{line:25,column:60}},{start:{line:25,column:63},end:{line:25,column:64}}],line:25}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"af94c4c4d82a366cf5e4291644b18a4200cda6dc"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_2e1nfd9631.s[0]++,require('egg').Controller);const _=(cov_2e1nfd9631.s[1]++,require('lodash'));/**
 * @Controller Key Management
 */class KeyController extends Controller{/**
   * @Summary List all keys
   * @Router GET /gateway/keys
   * @request query integer page
   * @request query integer pageSize
   * @request query boolean deleted
   * @Response 200 createdNewKey OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_2e1nfd9631.f[0]++;const{ctx}=(cov_2e1nfd9631.s[2]++,this);const query=(cov_2e1nfd9631.s[3]++,{deleted:ctx.query.deleted,pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_2e1nfd9631.b[0][0]++,ctx.query.pageSize):(cov_2e1nfd9631.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_2e1nfd9631.b[1][0]++,ctx.query.page):(cov_2e1nfd9631.b[1][1]++,1))});const data=(cov_2e1nfd9631.s[4]++,await ctx.service.gateway.key.list(query));const meta=(cov_2e1nfd9631.s[5]++,{total:data.length,page:query.page,per_page:query.pageSize});const start=(cov_2e1nfd9631.s[6]++,(query.page-1)*query.pageSize);const end=(cov_2e1nfd9631.s[7]++,start+query.pageSize);cov_2e1nfd9631.s[8]++;ctx.body={data:_.slice(data,start,end),meta};}/**
   * @Summary Get a key details
   * @Router GET /gateway/keys/{id}
   * @Request path string *id
   * @Response 200 createdNewKey OK
   * @Response 500 error Unknown internal server error
   */async show(){cov_2e1nfd9631.f[1]++;const{ctx}=(cov_2e1nfd9631.s[9]++,this);const{id}=(cov_2e1nfd9631.s[10]++,ctx.params);const key=(cov_2e1nfd9631.s[11]++,await ctx.service.gateway.key.findById(id));cov_2e1nfd9631.s[12]++;ctx.body={data:key};}/**
   * @Summary Create a key
   * @Router POST /gateway/keys
   * @Request body createNewKeyPayload *body
   * @Response 200 createdNewKey OK
   * @Response 500 error Unknown internal server error
   */async create(){cov_2e1nfd9631.f[2]++;const{ctx}=(cov_2e1nfd9631.s[13]++,this);cov_2e1nfd9631.s[14]++;ctx.validate(ctx.rule.createNewKeyPayload,ctx.request.body);const result=(cov_2e1nfd9631.s[15]++,await ctx.service.gateway.key.create(ctx.request.body));cov_2e1nfd9631.s[16]++;ctx.body={data:result};}/**
   * @Summary Update a key
   * @Router PATCH /gateway/keys/{id}
   * @Request path string *id
   * @Request body createNewKeyPayload *body
   * @Response 200 createdNewKey OK
   * @Response 500 error Unknown internal server error
   */async update(){cov_2e1nfd9631.f[3]++;const{ctx}=(cov_2e1nfd9631.s[17]++,this);const{id}=(cov_2e1nfd9631.s[18]++,ctx.params);const newValues=(cov_2e1nfd9631.s[19]++,ctx.request.body);cov_2e1nfd9631.s[20]++;ctx.validate(ctx.rule.createNewKeyPayload,newValues);const updatedKey=(cov_2e1nfd9631.s[21]++,await ctx.service.gateway.key.update(newValues,id));cov_2e1nfd9631.s[22]++;ctx.body={data:updatedKey};}/**
   * @Summary Delete a key
   * @Router DELETE /gateway/keys/{id}
   * @Request path string *id
   * @Response 200 createdNewKey OK
   * @Response 500 error Unknown internal server error
   */async destroy(){cov_2e1nfd9631.f[4]++;const{ctx}=(cov_2e1nfd9631.s[23]++,this);const{id}=(cov_2e1nfd9631.s[24]++,ctx.params);const deletedKey=(cov_2e1nfd9631.s[25]++,await ctx.service.gateway.key.destroy(id));cov_2e1nfd9631.s[26]++;ctx.body={data:deletedKey};}}cov_2e1nfd9631.s[27]++;module.exports=KeyController;