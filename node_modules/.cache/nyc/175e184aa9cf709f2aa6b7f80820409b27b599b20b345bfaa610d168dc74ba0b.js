'use strict';var cov_2a4fnucv5d=function(){var path="/home/htchen/console-core-service-sherpa/app/controller/ums/company.js";var hash="ca5ca27d67dd31ba334a08f9ec46db4d56848dac";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/htchen/console-core-service-sherpa/app/controller/ums/company.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:44}},"1":{start:{line:4,column:10},end:{line:4,column:27}},"2":{start:{line:25,column:20},end:{line:25,column:24}},"3":{start:{line:26,column:18},end:{line:29,column:5}},"4":{start:{line:37,column:8},end:{line:37,column:17}},"5":{start:{line:38,column:22},end:{line:38,column:33}},"6":{start:{line:39,column:17},end:{line:46,column:6}},"7":{start:{line:47,column:17},end:{line:51,column:5}},"8":{start:{line:52,column:18},end:{line:52,column:51}},"9":{start:{line:53,column:16},end:{line:53,column:38}},"10":{start:{line:54,column:4},end:{line:57,column:5}},"11":{start:{line:69,column:20},end:{line:69,column:24}},"12":{start:{line:70,column:19},end:{line:70,column:29}},"13":{start:{line:72,column:4},end:{line:74,column:5}},"14":{start:{line:86,column:20},end:{line:86,column:24}},"15":{start:{line:87,column:4},end:{line:87,column:65}},"16":{start:{line:89,column:4},end:{line:91,column:5}},"17":{start:{line:104,column:20},end:{line:104,column:24}},"18":{start:{line:105,column:19},end:{line:105,column:29}},"19":{start:{line:107,column:4},end:{line:107,column:65}},"20":{start:{line:108,column:4},end:{line:110,column:5}},"21":{start:{line:122,column:20},end:{line:122,column:24}},"22":{start:{line:123,column:19},end:{line:123,column:29}},"23":{start:{line:125,column:4},end:{line:127,column:5}},"24":{start:{line:131,column:0},end:{line:131,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:24,column:2},end:{line:24,column:3}},loc:{start:{line:24,column:17},end:{line:58,column:3}},line:24},"1":{name:"(anonymous_1)",decl:{start:{line:68,column:2},end:{line:68,column:3}},loc:{start:{line:68,column:16},end:{line:75,column:3}},line:68},"2":{name:"(anonymous_2)",decl:{start:{line:85,column:2},end:{line:85,column:3}},loc:{start:{line:85,column:18},end:{line:92,column:3}},line:85},"3":{name:"(anonymous_3)",decl:{start:{line:103,column:2},end:{line:103,column:3}},loc:{start:{line:103,column:18},end:{line:111,column:3}},line:103},"4":{name:"(anonymous_4)",decl:{start:{line:121,column:2},end:{line:121,column:3}},loc:{start:{line:121,column:19},end:{line:128,column:3}},line:121}},branchMap:{"0":{loc:{start:{line:27,column:33},end:{line:27,column:77}},type:"cond-expr",locations:[{start:{line:27,column:54},end:{line:27,column:72}},{start:{line:27,column:75},end:{line:27,column:77}}],line:27},"1":{loc:{start:{line:28,column:29},end:{line:28,column:64}},type:"cond-expr",locations:[{start:{line:28,column:46},end:{line:28,column:60}},{start:{line:28,column:63},end:{line:28,column:64}}],line:28}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"ca5ca27d67dd31ba334a08f9ec46db4d56848dac"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Controller=(cov_2a4fnucv5d.s[0]++,require('egg').Controller);const _=(cov_2a4fnucv5d.s[1]++,require('lodash'));/**
 * @Controller Company Management
 */class CompanyController extends Controller{/**
   * @Summary List all companies
   * @Router GET /companies
   * @Request query string name search company by name
   * @Request query string walletAddress search company by walletAddress
   * @Request query boolean deleted search company by deleted state
   * @Request query boolean filterEmptyWallet filter out company without wallet
   * @Request query string types filter company contains one of types
   * @Request query string consoleconnectEnabled
   * @Request query string pageSize
   * @Request query string page
   * @Response 200 companyList OK
   * @Response 500 error Unknown internal server error
   */async index(){cov_2a4fnucv5d.f[0]++;const{ctx}=(cov_2a4fnucv5d.s[2]++,this);const query=(cov_2a4fnucv5d.s[3]++,{pageSize:ctx.helper.toInt(ctx.query.pageSize?(cov_2a4fnucv5d.b[0][0]++,ctx.query.pageSize):(cov_2a4fnucv5d.b[0][1]++,10)),page:ctx.helper.toInt(ctx.query.page?(cov_2a4fnucv5d.b[1][0]++,ctx.query.page):(cov_2a4fnucv5d.b[1][1]++,1))});const{name,walletAddress,deleted,filterEmptyWallet,consoleconnectEnabled}=(cov_2a4fnucv5d.s[4]++,ctx.query);const{types}=(cov_2a4fnucv5d.s[5]++,ctx.queries);const data=(cov_2a4fnucv5d.s[6]++,await ctx.service.ums.company.list({name,walletAddress,deleted,filterEmptyWallet,types,consoleconnectEnabled}));const meta=(cov_2a4fnucv5d.s[7]++,{total:data.length,page:query.page,per_page:query.pageSize});const start=(cov_2a4fnucv5d.s[8]++,(query.page-1)*query.pageSize);const end=(cov_2a4fnucv5d.s[9]++,start+query.pageSize);cov_2a4fnucv5d.s[10]++;ctx.body={data:_.slice(data,start,end),meta};}/**
   * @Summary Get a company by Id
   * @Router GET /companies/{id}
   * @Request path string *id
   * @Response 200 company OK
   * @Response 404 user not found
   * @Response 500 error Unknown internal server error
   */async show(){cov_2a4fnucv5d.f[1]++;const{ctx}=(cov_2a4fnucv5d.s[11]++,this);const{id}=(cov_2a4fnucv5d.s[12]++,ctx.params);cov_2a4fnucv5d.s[13]++;ctx.body={data:await ctx.service.ums.company.findOne(id)};}/**
   * @Summary Create a company
   * @Router POST /companies
   * @Request body createCompanyPayload *body
   * @Response 200 company OK
   * @Response 404 company not found
   * @Response 500 error Unknown internal server error
   */async create(){cov_2a4fnucv5d.f[2]++;const{ctx}=(cov_2a4fnucv5d.s[14]++,this);cov_2a4fnucv5d.s[15]++;ctx.validate(ctx.rule.createCompanyPayload,ctx.request.body);cov_2a4fnucv5d.s[16]++;ctx.body={data:await ctx.service.ums.company.create(ctx.request.body)};}/**
   * @Summary Update a company
   * @Router PATCH /companies/{id}
   * @Request path string *id
   * @Request body updateCompanyPayload *body
   * @Response 200 company OK
   * @Response 404 company not found
   * @Response 500 error Unknown internal server error
   */async update(){cov_2a4fnucv5d.f[3]++;const{ctx}=(cov_2a4fnucv5d.s[17]++,this);const{id}=(cov_2a4fnucv5d.s[18]++,ctx.params);cov_2a4fnucv5d.s[19]++;ctx.validate(ctx.rule.updateCompanyPayload,ctx.request.body);cov_2a4fnucv5d.s[20]++;ctx.body={data:await ctx.service.ums.company.update(id,ctx.request.body)};}/**
   * @Summary Delete a company
   * @Router DELETE /companies/{id}
   * @Request path string *id
   * @Response 200 company OK
   * @Response 404 company not found
   * @Response 500 error Unknown internal server error
   */async destroy(){cov_2a4fnucv5d.f[4]++;const{ctx}=(cov_2a4fnucv5d.s[21]++,this);const{id}=(cov_2a4fnucv5d.s[22]++,ctx.params);cov_2a4fnucv5d.s[23]++;ctx.body={data:await ctx.service.ums.company.destroy(id)};}}cov_2a4fnucv5d.s[24]++;module.exports=CompanyController;