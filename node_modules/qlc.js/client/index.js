"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _methods = require("../common/method");
var ledger_1 = require("./ledger");
var Client = (function () {
    function Client(provider, firstConnect) {
        this._provider = provider;
        this.buildinLedger = new ledger_1.default(this);
        firstConnect && this.connectedOnce(firstConnect);
        this._setMethodsName();
    }
    Client.prototype.connectedOnce = function (cb) {
        var _this = this;
        if (this._provider.type === 'http' || this._provider.connectStatus) {
            cb && cb(this);
            return;
        }
        this._provider.on('connect', function () {
            cb && cb(_this);
            _this._provider.remove('connect');
        });
    };
    Client.prototype._setMethodsName = function () {
        var _this = this;
        var providerType = (this._provider.type || 'http').toLowerCase();
        for (var namespace in _methods) {
            if (providerType === 'ipc' && namespace === 'wallet') {
                this.wallet = undefined;
                continue;
            }
            if (this[namespace]) {
                continue;
            }
            var spaceMethods = _methods[namespace];
            this[namespace] = {};
            var _loop_1 = function (methodName) {
                var name = spaceMethods[methodName];
                this_1[namespace][methodName] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return _this.request.apply(_this, [name].concat(args));
                };
            };
            var this_1 = this;
            for (var methodName in spaceMethods) {
                _loop_1(methodName);
            }
        }
    };
    Client.prototype.setProvider = function (provider, abort) {
        abort && this._provider.abort(abort);
        this._provider = provider;
        var providerType = this._provider.type || 'http';
        if (providerType.toLowerCase !== 'ipc' || this.wallet) {
            return;
        }
        this._setMethodsName();
    };
    Client.prototype.request = function (methods) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var rep;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._provider.request(methods, args)];
                    case 1:
                        rep = _a.sent();
                        if (rep.error) {
                            throw rep.error;
                        }
                        return [2, rep.result];
                }
            });
        });
    };
    Client.prototype.notification = function (methods) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this._provider.notification(methods, args)];
            });
        });
    };
    Client.prototype.batch = function (reqs) {
        return __awaiter(this, void 0, void 0, function () {
            var reps;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reqs.forEach(function (v) {
                            v.type = v.type || 'request';
                        });
                        return [4, this._provider.batch(reqs)];
                    case 1:
                        reps = _a.sent();
                        return [2, reps];
                }
            });
        });
    };
    return Client;
}());
exports.default = Client;
//# sourceMappingURL=index.js.map