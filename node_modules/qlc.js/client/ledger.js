"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tools_1 = require("../utils/tools");
var bignumber_js_1 = require("bignumber.js");
var Ledger = (function () {
    function Ledger(client) {
        this.zeroHash = '0000000000000000000000000000000000000000000000000000000000000000';
        this._client = client;
    }
    Ledger.prototype.getBalance = function (addr) {
        return __awaiter(this, void 0, void 0, function () {
            var err, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        err = tools_1.checkParams({ addr: addr }, ['addr'], [
                            {
                                name: 'addr',
                                func: tools_1.isValidHexAddr
                            }
                        ]);
                        if (err) {
                            return [2, Promise.reject(err)];
                        }
                        return [4, this._client.batch([
                                {
                                    methodName: "ledger_process",
                                    params: [addr]
                                }
                            ])];
                    case 1:
                        data = _a.sent();
                        if (!data || +data.length < 2) {
                            return [2, null];
                        }
                        return [2, {
                                balance: data[0].result,
                                onroad: data[1].result
                            }];
                }
            });
        });
    };
    Ledger.prototype.accountPublicKey = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("account_publicKey", account)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        return [2, e_1];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountForPublicKey = function (accountPublicKey) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("account_forPublicKey", accountPublicKey)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_2 = _a.sent();
                        return [2, e_2];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountValidate = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("account_validate", account)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_3 = _a.sent();
                        return [2, e_3];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountBlocksCount = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_accountBlocksCount", account)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_4 = _a.sent();
                        return [2, e_4];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountHistoryTopn = function (account, number, offset) {
        if (offset === void 0) { offset = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_accountHistoryTopn", account, number, offset)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_5 = _a.sent();
                        return [2, e_5];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountInfo = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_accountInfo", account)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_6 = _a.sent();
                        return [2, e_6];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountRepresentative = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var e_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_accountRepresentative", account)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_7 = _a.sent();
                        return [2, e_7];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountVotingWeight = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var e_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_accountVotingWeight", account)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_8 = _a.sent();
                        return [2, e_8];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountsBalances = function (accounts) {
        return __awaiter(this, void 0, void 0, function () {
            var e_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_accountsBalances", accounts)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_9 = _a.sent();
                        return [2, e_9];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountsFrontiers = function (accounts) {
        return __awaiter(this, void 0, void 0, function () {
            var e_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_accountsFrontiers", accounts)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_10 = _a.sent();
                        return [2, e_10];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountsPending = function (accounts, number) {
        if (number === void 0) { number = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var e_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_accountsPending", accounts, number)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_11 = _a.sent();
                        return [2, e_11];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accountsCount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_accountsCount")];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_12 = _a.sent();
                        return [2, e_12];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.accounts = function (number, offset) {
        if (offset === void 0) { offset = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var e_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_accounts", number, offset)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_13 = _a.sent();
                        return [2, e_13];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.blockAccount = function (blockHash) {
        return __awaiter(this, void 0, void 0, function () {
            var e_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_blockAccount", blockHash)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_14 = _a.sent();
                        return [2, e_14];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.blockHash = function (block) {
        return __awaiter(this, void 0, void 0, function () {
            var e_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_blockHash", block)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_15 = _a.sent();
                        return [2, e_15];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.blocks = function (number, offset) {
        if (offset === void 0) { offset = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var e_16;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_blocks", number, offset)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_16 = _a.sent();
                        return [2, e_16];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.blocksCount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_17;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_blocksCount")];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_17 = _a.sent();
                        return [2, e_17];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.blocksCountByType = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_18;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_blocksCountByType")];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_18 = _a.sent();
                        return [2, e_18];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.blocksInfo = function (blocks) {
        return __awaiter(this, void 0, void 0, function () {
            var e_19;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_blocksInfo", blocks)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_19 = _a.sent();
                        return [2, e_19];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.chain = function (blockHashes, number) {
        if (number === void 0) { number = -1; }
        return __awaiter(this, void 0, void 0, function () {
            var e_20;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_chain", blockHashes, number)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_20 = _a.sent();
                        return [2, e_20];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.delegators = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var e_21;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_delegators", account)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_21 = _a.sent();
                        return [2, e_21];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.delegatorsCount = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var e_22;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_delegatorsCount", account)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_22 = _a.sent();
                        return [2, e_22];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.process = function (block) {
        return __awaiter(this, void 0, void 0, function () {
            var e_23;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_process", block)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_23 = _a.sent();
                        return [2, e_23];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.representatives = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_24;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_representatives")];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_24 = _a.sent();
                        return [2, e_24];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.tokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_25;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_tokens")];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_25 = _a.sent();
                        return [2, e_25];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.transactionsCount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_26;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_transactionsCount")];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_26 = _a.sent();
                        return [2, e_26];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.tokenInfoById = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_27;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_tokenInfoById", tokenId)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_27 = _a.sent();
                        return [2, e_27];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.tokenInfoByName = function (tokenName) {
        return __awaiter(this, void 0, void 0, function () {
            var e_28;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("ledger_tokenInfoByName", tokenName)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_28 = _a.sent();
                        return [2, e_28];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.generateSendBlock = function (sendBlock) {
        return __awaiter(this, void 0, void 0, function () {
            var accountFrom, tokens, token, fromTokens, link, remainingDecimal, preBlockResult, preBlock, blockData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accountInfo(sendBlock.from)];
                    case 1:
                        accountFrom = _a.sent();
                        tokens = accountFrom.result.tokens;
                        return [4, this.tokenInfoByName(sendBlock.tokenName)];
                    case 2:
                        token = _a.sent();
                        fromTokens = Array.isArray(tokens) ? tokens.filter(function (tokenMeta) { return tokenMeta.type === token.result.tokenId; })[0] : null;
                        return [4, this.accountPublicKey(sendBlock.to)];
                    case 3:
                        link = _a.sent();
                        remainingDecimal = new bignumber_js_1.BigNumber(fromTokens.balance).minus(sendBlock.amount).toString(10);
                        return [4, this.blocksInfo([fromTokens.header])];
                    case 4:
                        preBlockResult = _a.sent();
                        preBlock = preBlockResult.result[0];
                        blockData = {
                            type: 'Send',
                            token: token.result.tokenId,
                            address: sendBlock.from,
                            balance: remainingDecimal,
                            previous: fromTokens.header,
                            link: link.result,
                            sender: '',
                            receiver: '',
                            message: this.zeroHash,
                            poVHeight: 0,
                            vote: preBlock.vote,
                            network: preBlock.network,
                            storage: preBlock.storage,
                            oracle: preBlock.oracle,
                            timestamp: Math.floor(new Date().getTime() / 1000),
                            extra: this.zeroHash,
                            representative: accountFrom.result.representative
                        };
                        return [2, blockData];
                }
            });
        });
    };
    Ledger.prototype.generateReceiveBlock = function (sendBlock) {
        return __awaiter(this, void 0, void 0, function () {
            var accountToFromPublicKey, remainingDecimal, vote, network, storage, oracle, type, previous, accountTo, representative, tokens, fromTokens, preBlockResult, preBlock, blockData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accountForPublicKey(sendBlock.link)];
                    case 1:
                        accountToFromPublicKey = _a.sent();
                        remainingDecimal = '0';
                        vote = '0';
                        network = '0';
                        storage = '0';
                        oracle = '0';
                        type = 'Receive';
                        previous = this.zeroHash;
                        return [4, this.accountInfo(accountToFromPublicKey.result)];
                    case 2:
                        accountTo = _a.sent();
                        representative = sendBlock.representative;
                        if (!accountTo.result) return [3, 6];
                        tokens = accountTo.result.tokens;
                        fromTokens = Array.isArray(tokens) ? tokens.filter(function (tokenMeta) { return tokenMeta.type === sendBlock.token; })[0] : null;
                        if (!fromTokens) return [3, 4];
                        remainingDecimal = new bignumber_js_1.BigNumber(fromTokens.balance).plus(sendBlock.amount).toString(10);
                        previous = fromTokens.header;
                        representative = fromTokens.representative;
                        return [4, this.blocksInfo([fromTokens.header])];
                    case 3:
                        preBlockResult = _a.sent();
                        preBlock = preBlockResult.result[0];
                        vote = preBlock.vote;
                        network = preBlock.network;
                        storage = preBlock.storage;
                        oracle = preBlock.oracle;
                        return [3, 5];
                    case 4:
                        type = 'Open';
                        remainingDecimal = new bignumber_js_1.BigNumber(0).plus(sendBlock.amount).toString(10);
                        vote = new bignumber_js_1.BigNumber(0).toString(10);
                        network = new bignumber_js_1.BigNumber(0).toString(10);
                        storage = new bignumber_js_1.BigNumber(0).toString(10);
                        oracle = new bignumber_js_1.BigNumber(0).toString(10);
                        _a.label = 5;
                    case 5: return [3, 7];
                    case 6:
                        type = 'Open';
                        remainingDecimal = new bignumber_js_1.BigNumber(0).plus(sendBlock.amount).toString(10);
                        vote = new bignumber_js_1.BigNumber(0).toString(10);
                        network = new bignumber_js_1.BigNumber(0).toString(10);
                        storage = new bignumber_js_1.BigNumber(0).toString(10);
                        oracle = new bignumber_js_1.BigNumber(0).toString(10);
                        _a.label = 7;
                    case 7:
                        blockData = {
                            type: type,
                            token: sendBlock.token,
                            address: accountToFromPublicKey.result,
                            balance: remainingDecimal,
                            previous: previous,
                            link: sendBlock.hash,
                            message: this.zeroHash,
                            poVHeight: 0,
                            vote: vote,
                            network: network,
                            storage: storage,
                            oracle: oracle,
                            timestamp: Math.floor(new Date().getTime() / 1000),
                            extra: this.zeroHash,
                            representative: representative
                        };
                        return [2, blockData];
                }
            });
        });
    };
    Ledger.prototype.generateChangeBlock = function (account, representative) {
        return __awaiter(this, void 0, void 0, function () {
            var accountChanging, changingTokens, token, changingToken, balanceDecimal, preBlockResult, preBlock, blockData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accountInfo(account)];
                    case 1:
                        accountChanging = _a.sent();
                        changingTokens = accountChanging.result.tokens;
                        return [4, this.tokenInfoByName('QLC')];
                    case 2:
                        token = _a.sent();
                        changingToken = Array.isArray(changingTokens) ? changingTokens.filter(function (tokenMeta) { return tokenMeta.type === token.result.tokenId; })[0] : null;
                        balanceDecimal = new bignumber_js_1.BigNumber(changingToken.balance).toString(10);
                        return [4, this.blocksInfo([changingToken.header])];
                    case 3:
                        preBlockResult = _a.sent();
                        preBlock = preBlockResult.result[0];
                        blockData = {
                            type: 'Change',
                            token: token.result.tokenId,
                            address: account,
                            balance: balanceDecimal,
                            previous: changingToken.header,
                            link: this.zeroHash,
                            message: this.zeroHash,
                            poVHeight: 0,
                            vote: preBlock.vote,
                            network: preBlock.network,
                            storage: preBlock.storage,
                            oracle: preBlock.oracle,
                            timestamp: Math.floor(new Date().getTime() / 1000),
                            extra: this.zeroHash,
                            representative: representative
                        };
                        return [2, blockData];
                }
            });
        });
    };
    Ledger.prototype.getMintageData = function (mintageParams) {
        return __awaiter(this, void 0, void 0, function () {
            var e_29;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("mintage_getMintageData", mintageParams)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_29 = _a.sent();
                        return [2, e_29];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.getMintageBlock = function (mintageParams) {
        return __awaiter(this, void 0, void 0, function () {
            var e_30;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("mintage_getMintageBlock", mintageParams)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_30 = _a.sent();
                        return [2, e_30];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.getRewardBlock = function (block) {
        return __awaiter(this, void 0, void 0, function () {
            var e_31;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("mintage_getRewardBlock", block)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_31 = _a.sent();
                        return [2, e_31];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.phoneBlocks = function (phoneNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var e_32;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("sms_phoneBlocks", phoneNumber)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_32 = _a.sent();
                        return [2, e_32];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.messageBlocks = function (messageHash) {
        return __awaiter(this, void 0, void 0, function () {
            var e_33;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("sms_messageBlocks", messageHash)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_33 = _a.sent();
                        return [2, e_33];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.messageHash = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var e_34;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("sms_messageHash", message)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_34 = _a.sent();
                        return [2, e_34];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.messageStore = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var e_35;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("sms_messageStore", message)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_35 = _a.sent();
                        return [2, e_35];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.onlineRepresentatives = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_36;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("net_onlineRepresentatives")];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_36 = _a.sent();
                        return [2, e_36];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.rawToBalance = function (balance, unit, tokenName) {
        if (tokenName === void 0) { tokenName = 'QLC'; }
        return __awaiter(this, void 0, void 0, function () {
            var e_37;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("util_rawToBalance", balance, unit, tokenName)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_37 = _a.sent();
                        return [2, e_37];
                    case 3: return [2];
                }
            });
        });
    };
    Ledger.prototype.balanceToRaw = function (balance, unit, tokenName) {
        if (tokenName === void 0) { tokenName = 'QLC'; }
        return __awaiter(this, void 0, void 0, function () {
            var e_38;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this._client.request("util_balanceToRaw", balance, unit, tokenName)];
                    case 1: return [2, _a.sent()];
                    case 2:
                        e_38 = _a.sent();
                        return [2, e_38];
                    case 3: return [2];
                }
            });
        });
    };
    return Ledger;
}());
exports.default = Ledger;
//# sourceMappingURL=ledger.js.map