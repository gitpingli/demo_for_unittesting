"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ipc_ws_1 = require("./Communication/ipc_ws");
var websocket = require('websocket').w3cwebsocket;
var WS_RPC = (function (_super) {
    __extends(WS_RPC, _super);
    function WS_RPC(url, timeout, options) {
        if (url === void 0) { url = 'ws://localhost:9736'; }
        if (timeout === void 0) { timeout = 60000; }
        if (options === void 0) { options = {
            protocol: '',
            headers: '',
            clientConfig: '',
            retryTimes: 10,
            retryInterval: 10000
        }; }
        var _this = _super.call(this, {
            onEventTypes: ['error', 'close', 'connect'],
            sendFuncName: 'send'
        }) || this;
        if (!url) {
            console.error(_this.ERRORS.CONNECT(url));
            return _this.ERRORS.CONNECT(url);
        }
        _this.type = 'ws';
        _this.url = url;
        _this.timeout = timeout;
        _this.protocol = options.protocol;
        _this.headers = options.headers;
        _this.clientConfig = options.clientConfig;
        _this.reconnect();
        var times = 0;
        _this.on('connect', function () {
            times = 0;
        });
        _this.on('close', function () {
            if (times > options.retryTimes) {
                return;
            }
            setTimeout(function () {
                times++;
                _this.reconnect();
            }, options.retryInterval);
        });
        return _this;
    }
    WS_RPC.prototype.reconnect = function () {
        var _this = this;
        this.socket = new websocket(this.url, this.protocol, undefined, this.headers, undefined, this.clientConfig);
        this.socket.onopen = function () {
            _this.socket.readyState === _this.socket.OPEN && _this._connected();
        };
        this.socket.onclose = function () {
            _this._closed();
        };
        this.socket.onerror = function () {
            _this._errored();
        };
        this.socket.onmessage = function (e) {
            var data = typeof e.data === 'string' ? e.data : '';
            _this._parse([data]);
        };
    };
    WS_RPC.prototype._send = function (payloads) {
        if (!this.connectStatus) {
            return Promise.reject(this.ERRORS.CONNECT(this.url));
        }
        this.socket.send(JSON.stringify(payloads));
        return this._onSend(payloads);
    };
    WS_RPC.prototype.disconnect = function () {
        this.socket && this.socket.close && this.socket.close();
    };
    WS_RPC.prototype.request = function (methodName, params) {
        var requestObj = this._getRequestPayload(methodName, params);
        if (requestObj instanceof Error) {
            return Promise.reject(requestObj);
        }
        return this._send(requestObj);
    };
    WS_RPC.prototype.notification = function (methodName, params) {
        var requestObj = this._getNotificationPayload(methodName, params);
        if (requestObj instanceof Error) {
            return requestObj;
        }
        this._send(requestObj);
    };
    WS_RPC.prototype.batch = function (requests) {
        if (requests === void 0) { requests = []; }
        var _requests = this._getBatchPayload(requests);
        if (_requests instanceof Error) {
            return Promise.reject(_requests);
        }
        return this._send(_requests);
    };
    return WS_RPC;
}(ipc_ws_1.default));
exports.wsProvider = WS_RPC;
//# sourceMappingURL=WS.js.map