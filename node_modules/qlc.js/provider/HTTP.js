"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_js_1 = require("./Communication/index.js");
var XMLHttpRequest = typeof window !== 'undefined' && window.XMLHttpRequest
    ? window.XMLHttpRequest
    : require('xhr2');
var HTTP_RPC = (function (_super) {
    __extends(HTTP_RPC, _super);
    function HTTP_RPC(host, timeout, options) {
        if (host === void 0) { host = 'http://127.0.0.1:9735'; }
        if (timeout === void 0) { timeout = 60000; }
        if (options === void 0) { options = {
            headers: []
        }; }
        var _this = _super.call(this) || this;
        _this.type = 'http';
        _this.url = host;
        _this.timeout = timeout;
        _this.headers = options.headers;
        return _this;
    }
    HTTP_RPC.prototype._getRequest = function () {
        var request = new XMLHttpRequest();
        request.open('POST', this.url);
        request.setRequestHeader('Content-Type', 'application/json;charset=utf-8');
        this.headers &&
            this.headers.forEach(function (header) {
                request.setRequestHeader(header.name, header.value);
            });
        return request;
    };
    HTTP_RPC.prototype._send = function (payload) {
        var _this = this;
        return new Promise(function (res, rej) {
            var resetAbort = false;
            var request = _this._getRequest();
            var _request = _this._addReq({
                request: request,
                rej: function (err) {
                    resetAbort = true;
                    rej(err);
                }
            });
            var clearRequestAndTimeout = function () {
                requestTimeout && clearTimeout(requestTimeout);
                requestTimeout = null;
                _this._removeReq(_request);
            };
            var requestTimeout = _this.timeout
                ? setTimeout(function () {
                    if (resetAbort) {
                        return;
                    }
                    request.abort();
                    clearRequestAndTimeout();
                    return rej(_this.ERRORS.TIMEOUT(_this.timeout));
                }, _this.timeout)
                : null;
            request.onreadystatechange = function () {
                if (request.readyState !== 4 || resetAbort) {
                    return;
                }
                clearRequestAndTimeout();
                var result = request.responseText;
                try {
                    result = result ? JSON.parse(result) : null;
                    if (result && result.error) {
                        return rej(result);
                    }
                }
                catch (e) {
                    return rej(_this.ERRORS.INVAILID_RESPONSE(result));
                }
                return res(result);
            };
            try {
                request.send(JSON.stringify(payload));
            }
            catch (err) {
                clearRequestAndTimeout();
                return rej(_this.ERRORS.CONNECT(_this.url));
            }
        });
    };
    HTTP_RPC.prototype.request = function (methodName, params) {
        return __awaiter(this, void 0, void 0, function () {
            var requestObj;
            var _this = this;
            return __generator(this, function (_a) {
                requestObj = this._getRequestPayload(methodName, params);
                if (requestObj instanceof Error) {
                    return [2, Promise.reject(requestObj)];
                }
                return [2, this._send(requestObj).then(function (res) {
                        if (!res) {
                            throw _this.ERRORS.INVAILID_RESPONSE(res);
                        }
                        return {
                            result: (typeof res.result !== 'undefined') ? res : null,
                            error: (typeof res.error !== 'undefined') ? res.error.message : null
                        };
                    })];
            });
        });
    };
    HTTP_RPC.prototype.notification = function (methodName, params) {
        var requestObj = this._getNotificationPayload(methodName, params);
        if (requestObj instanceof Error) {
            return Promise.reject(requestObj);
        }
        return this._send(requestObj);
    };
    HTTP_RPC.prototype.batch = function (requests) {
        if (requests === void 0) { requests = []; }
        var _requests = this._getBatchPayload(requests);
        if (_requests instanceof Error) {
            return Promise.reject(_requests);
        }
        return this._send(_requests).then(function (results) {
            results = (results || []).sort(function (a, b) {
                return a.id - b.id;
            });
            var _results = [];
            var i = 0;
            _requests.forEach(function (_request) {
                if (!_request.id) {
                    _results.push(null);
                    return;
                }
                _results.push({
                    result: results[i].result || null,
                    error: results[i].error || null
                });
                i++;
            });
            results = null;
            _requests = null;
            return _results;
        });
    };
    return HTTP_RPC;
}(index_js_1.default));
exports.httpProvider = HTTP_RPC;
//# sourceMappingURL=HTTP.js.map